animations
{'function_definition': 'public partial int AnimationCount;', 'function_to_bind': 'animation_count'}
{'function_definition': 'public partial int AnimationIndex(string name);', 'function_to_bind': 'animation_index'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'animation_script_name'}
{'function_definition': 'public partial Animation CreateAnimation(string name);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public partial Animation CreateAnimation(string name, bool withSound);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_animation_script'}
{'function_definition': 'public static partial int AnimationCount(AnimationScript script);', 'function_to_bind': 'animation_count'}
{'function_definition': 'public static partial int AnimationCurrentCell(Animation anim);', 'function_to_bind': 'animation_current_cell'}
{'function_definition': 'public static partial Vector2D AnimationCurrentVector(Animation anim);', 'function_to_bind': 'animation_current_vector'}
{'function_definition': 'public static partial bool AnimationEnded(Animation anim);', 'function_to_bind': 'animation_ended'}
{'function_definition': 'public static partial bool AnimationEnteredFrame(Animation anim);', 'function_to_bind': 'animation_entered_frame'}
{'function_definition': 'public static partial float AnimationFrameTime(Animation anim);', 'function_to_bind': 'animation_frame_time'}
{'function_definition': 'public static partial int AnimationIndex(AnimationScript script, string name);', 'function_to_bind': 'animation_index'}
{'function_definition': 'public static partial string AnimationName(Animation temp);', 'function_to_bind': 'animation_name'}
{'function_definition': 'public static partial string AnimationScriptName(AnimationScript script);', 'function_to_bind': 'animation_script_name'}
{'function_definition': 'public static partial AnimationScript AnimationScriptNamed(string name);', 'function_to_bind': 'animation_script_named'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, AnimationScript script, string name);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, AnimationScript script, string name, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, AnimationScript script, int idx);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, AnimationScript script, int idx, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, string scriptName, string name);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, string scriptName, string name, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, int idx);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, int idx, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, string name);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void AssignAnimation(Animation anim, string name, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial Animation CreateAnimation(AnimationScript script, int idx, bool withSound);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public static partial Animation CreateAnimation(AnimationScript script, string name);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public static partial Animation CreateAnimation(AnimationScript script, string name, bool withSound);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public static partial Animation CreateAnimation(string scriptName, string name);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public static partial Animation CreateAnimation(string scriptName, string name, bool withSound);', 'function_to_bind': 'create_animation'}
{'function_definition': 'public static partial void FreeAllAnimationScripts();', 'function_to_bind': 'free_all_animation_scripts'}
{'function_definition': 'public static partial void FreeAnimation(Animation ani);', 'function_to_bind': 'free_animation'}
{'function_definition': 'public static partial void FreeAnimationScript(AnimationScript scriptToFree);', 'function_to_bind': 'free_animation_script'}
{'function_definition': 'public static partial void FreeAnimationScript(string name);', 'function_to_bind': 'free_animation_script'}
{'function_definition': 'public static partial bool HasAnimationNamed(AnimationScript script, string name);', 'function_to_bind': 'has_animation_named'}
{'function_definition': 'public static partial bool HasAnimationScript(string name);', 'function_to_bind': 'has_animation_script'}
{'function_definition': 'public static partial AnimationScript LoadAnimationScript(string name, string filename);', 'function_to_bind': 'load_animation_script'}
{'function_definition': 'public static partial void RestartAnimation(Animation anim);', 'function_to_bind': 'restart_animation'}
{'function_definition': 'public static partial void RestartAnimation(Animation anim, bool withSound);', 'function_to_bind': 'restart_animation'}
{'function_definition': 'public static partial void UpdateAnimation(Animation anim, float pct, bool withSound);', 'function_to_bind': 'update_animation'}
{'function_definition': 'public static partial void UpdateAnimation(Animation anim);', 'function_to_bind': 'update_animation'}
{'function_definition': 'public static partial void UpdateAnimation(Animation anim, float pct);', 'function_to_bind': 'update_animation'}
{'function_definition': 'public static partial bool AudioReady();', 'function_to_bind': 'audio_ready'}
{'function_definition': 'public static partial void CloseAudio();', 'function_to_bind': 'close_audio'}
{'function_definition': 'public static partial void OpenAudio();', 'function_to_bind': 'open_audio'}
{'function_definition': 'public static partial void FadeMusicIn(string name, int ms);', 'function_to_bind': 'fade_music_in'}
{'function_definition': 'public static partial void FadeMusicIn(string name, int times, int ms);', 'function_to_bind': 'fade_music_in'}
{'function_definition': 'public static partial void FadeMusicIn(Music data, int ms);', 'function_to_bind': 'fade_music_in'}
{'function_definition': 'public static partial void FadeMusicIn(Music data, int times, int ms);', 'function_to_bind': 'fade_music_in'}
{'function_definition': 'public static partial void FadeMusicOut(int ms);', 'function_to_bind': 'fade_music_out'}
{'function_definition': 'public static partial void FreeAllMusic();', 'function_to_bind': 'free_all_music'}
{'function_definition': 'public static partial void FreeMusic(Music effect);', 'function_to_bind': 'free_music'}
{'function_definition': 'public static partial bool HasMusic(string name);', 'function_to_bind': 'has_music'}
{'function_definition': 'public static partial Music LoadMusic(string name, string filename);', 'function_to_bind': 'load_music'}
{'function_definition': 'public static partial string MusicFilename(Music data);', 'function_to_bind': 'music_filename'}
{'function_definition': 'public static partial string MusicName(Music data);', 'function_to_bind': 'music_name'}
{'function_definition': 'public static partial Music MusicNamed(string name);', 'function_to_bind': 'music_named'}
{'function_definition': 'public static partial bool MusicPlaying();', 'function_to_bind': 'music_playing'}
{'function_definition': 'public static partial bool MusicValid(Music m);', 'function_to_bind': 'music_valid'}
{'function_definition': 'public static partial double MusicVolume();', 'function_to_bind': 'music_volume'}
{'function_definition': 'public static partial void PauseMusic();', 'function_to_bind': 'pause_music'}
{'function_definition': 'public static partial void PlayMusic(string name);', 'function_to_bind': 'play_music'}
{'function_definition': 'public static partial void PlayMusic(string name, int times);', 'function_to_bind': 'play_music'}
{'function_definition': 'public static partial void PlayMusic(Music data);', 'function_to_bind': 'play_music'}
{'function_definition': 'public static partial void PlayMusic(Music data, int times);', 'function_to_bind': 'play_music'}
{'function_definition': 'public static partial void PlayMusic(Music data, int times, double volume);', 'function_to_bind': 'play_music'}
{'function_definition': 'public static partial void ResumeMusic();', 'function_to_bind': 'resume_music'}
{'function_definition': 'public static partial void SetMusicVolume(double volume);', 'function_to_bind': 'set_music_volume'}
{'function_definition': 'public static partial void StopMusic();', 'function_to_bind': 'stop_music'}
{'function_definition': 'public static partial void FadeAllSoundEffectsOut(int ms);', 'function_to_bind': 'fade_all_sound_effects_out'}
{'function_definition': 'public static partial void FadeSoundEffectOut(SoundEffect effect, int ms);', 'function_to_bind': 'fade_sound_effect_out'}
{'function_definition': 'public static partial void FreeAllSoundEffects();', 'function_to_bind': 'free_all_sound_effects'}
{'function_definition': 'public static partial void FreeSoundEffect(SoundEffect effect);', 'function_to_bind': 'free_sound_effect'}
{'function_definition': 'public static partial bool HasSoundEffect(string name);', 'function_to_bind': 'has_sound_effect'}
{'function_definition': 'public static partial SoundEffect LoadSoundEffect(string name, string filename);', 'function_to_bind': 'load_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(string name);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(string name, double volume);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(string name, int times);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(string name, int times, double volume);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(SoundEffect effect);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(SoundEffect effect, double volume);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(SoundEffect effect, int times);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial void PlaySoundEffect(SoundEffect effect, int times, double volume);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public static partial string SoundEffectFilename(SoundEffect effect);', 'function_to_bind': 'sound_effect_filename'}
{'function_definition': 'public static partial string SoundEffectName(SoundEffect effect);', 'function_to_bind': 'sound_effect_name'}
{'function_definition': 'public static partial SoundEffect SoundEffectNamed(string name);', 'function_to_bind': 'sound_effect_named'}
{'function_definition': 'public static partial bool SoundEffectPlaying(string name);', 'function_to_bind': 'sound_effect_playing'}
{'function_definition': 'public static partial bool SoundEffectPlaying(SoundEffect effect);', 'function_to_bind': 'sound_effect_playing'}
{'function_definition': 'public static partial bool SoundEffectValid(SoundEffect effect);', 'function_to_bind': 'sound_effect_valid'}
{'function_definition': 'public static partial void StopSoundEffect(string name);', 'function_to_bind': 'stop_sound_effect'}
{'function_definition': 'public static partial void StopSoundEffect(SoundEffect effect);', 'function_to_bind': 'stop_sound_effect'}
{'function_definition': 'public static partial Point2D CameraPosition();', 'function_to_bind': 'camera_position'}
{'function_definition': 'public static partial double CameraX();', 'function_to_bind': 'camera_x'}
{'function_definition': 'public static partial double CameraY();', 'function_to_bind': 'camera_y'}
{'function_definition': 'public static partial void CenterCameraOn(Sprite s, Vector2D offset);', 'function_to_bind': 'center_camera_on'}
{'function_definition': 'public static partial void CenterCameraOn(Sprite s, double offsetX, double offsetY);', 'function_to_bind': 'center_camera_on'}
{'function_definition': 'public static partial void MoveCameraBy(Vector2D offset);', 'function_to_bind': 'move_camera_by'}
{'function_definition': 'public static partial void MoveCameraBy(double dx, double dy);', 'function_to_bind': 'move_camera_by'}
{'function_definition': 'public static partial void MoveCameraTo(Point2D pt);', 'function_to_bind': 'move_camera_to'}
{'function_definition': 'public static partial void MoveCameraTo(double x, double y);', 'function_to_bind': 'move_camera_to'}
{'function_definition': 'public static partial bool PointInWindow(Window wind, Point2D pt);', 'function_to_bind': 'point_in_window'}
{'function_definition': 'public static partial bool PointOnScreen(Point2D pt);', 'function_to_bind': 'point_on_screen'}
{'function_definition': 'public static partial bool RectInWindow(Window wind, Rectangle rect);', 'function_to_bind': 'rect_in_window'}
{'function_definition': 'public static partial bool RectOnScreen(Rectangle rect);', 'function_to_bind': 'rect_on_screen'}
{'function_definition': 'public static partial Point2D ScreenCenter();', 'function_to_bind': 'screen_center'}
{'function_definition': 'public static partial Rectangle ScreenRectangle();', 'function_to_bind': 'screen_rectangle'}
{'function_definition': 'public static partial void SetCameraPosition(Point2D pos);', 'function_to_bind': 'set_camera_position'}
{'function_definition': 'public static partial void SetCameraX(double x);', 'function_to_bind': 'set_camera_x'}
{'function_definition': 'public static partial void SetCameraY(double y);', 'function_to_bind': 'set_camera_y'}
{'function_definition': 'public static partial Point2D ToScreen(Point2D pt);', 'function_to_bind': 'to_screen'}
{'function_definition': 'public static partial Rectangle ToScreen(Rectangle rect);', 'function_to_bind': 'to_screen'}
{'function_definition': 'public static partial double ToScreenX(double worldX);', 'function_to_bind': 'to_screen_x'}
{'function_definition': 'public static partial double ToScreenY(double worldY);', 'function_to_bind': 'to_screen_y'}
{'function_definition': 'public static partial Point2D ToWorld(Point2D pt);', 'function_to_bind': 'to_world'}
{'function_definition': 'public static partial double ToWorldX(double screenX);', 'function_to_bind': 'to_world_x'}
{'function_definition': 'public static partial double ToWorldY(double screenY);', 'function_to_bind': 'to_world_y'}
{'function_definition': 'public static partial Vector2D VectorWorldToScreen();', 'function_to_bind': 'vector_world_to_screen'}
{'function_definition': 'public static partial Rectangle WindowArea(Window wind);', 'function_to_bind': 'window_area'}
{'function_definition': 'public static partial int AlphaOf(Color c);', 'function_to_bind': 'alpha_of'}
{'function_definition': 'public static partial int BlueOf(Color c);', 'function_to_bind': 'blue_of'}
{'function_definition': 'public static partial double BrightnessOf(Color c);', 'function_to_bind': 'brightness_of'}
{'function_definition': 'public static partial Color ColorAliceBlue();', 'function_to_bind': 'color_alice_blue'}
{'function_definition': 'public static partial Color ColorAntiqueWhite();', 'function_to_bind': 'color_antique_white'}
{'function_definition': 'public static partial Color ColorAqua();', 'function_to_bind': 'color_aqua'}
{'function_definition': 'public static partial Color ColorAquamarine();', 'function_to_bind': 'color_aquamarine'}
{'function_definition': 'public static partial Color ColorAzure();', 'function_to_bind': 'color_azure'}
{'function_definition': 'public static partial Color ColorBeige();', 'function_to_bind': 'color_beige'}
{'function_definition': 'public static partial Color ColorBisque();', 'function_to_bind': 'color_bisque'}
{'function_definition': 'public static partial Color ColorBlack();', 'function_to_bind': 'color_black'}
{'function_definition': 'public static partial Color ColorBlanchedAlmond();', 'function_to_bind': 'color_blanched_almond'}
{'function_definition': 'public static partial Color ColorBlue();', 'function_to_bind': 'color_blue'}
{'function_definition': 'public static partial Color ColorBlueViolet();', 'function_to_bind': 'color_blue_violet'}
{'function_definition': 'public static partial Color ColorBrightGreen();', 'function_to_bind': 'color_bright_green'}
{'function_definition': 'public static partial Color ColorBrown();', 'function_to_bind': 'color_brown'}
{'function_definition': 'public static partial Color ColorBurlyWood();', 'function_to_bind': 'color_burly_wood'}
{'function_definition': 'public static partial Color ColorCadetBlue();', 'function_to_bind': 'color_cadet_blue'}
{'function_definition': 'public static partial Color ColorChartreuse();', 'function_to_bind': 'color_chartreuse'}
{'function_definition': 'public static partial Color ColorChocolate();', 'function_to_bind': 'color_chocolate'}
{'function_definition': 'public static partial Color ColorCoral();', 'function_to_bind': 'color_coral'}
{'function_definition': 'public static partial Color ColorCornflowerBlue();', 'function_to_bind': 'color_cornflower_blue'}
{'function_definition': 'public static partial Color ColorCornsilk();', 'function_to_bind': 'color_cornsilk'}
{'function_definition': 'public static partial Color ColorCrimson();', 'function_to_bind': 'color_crimson'}
{'function_definition': 'public static partial Color ColorCyan();', 'function_to_bind': 'color_cyan'}
{'function_definition': 'public static partial Color ColorDarkBlue();', 'function_to_bind': 'color_dark_blue'}
{'function_definition': 'public static partial Color ColorDarkCyan();', 'function_to_bind': 'color_dark_cyan'}
{'function_definition': 'public static partial Color ColorDarkGoldenrod();', 'function_to_bind': 'color_dark_goldenrod'}
{'function_definition': 'public static partial Color ColorDarkGray();', 'function_to_bind': 'color_dark_gray'}
{'function_definition': 'public static partial Color ColorDarkGreen();', 'function_to_bind': 'color_dark_green'}
{'function_definition': 'public static partial Color ColorDarkKhaki();', 'function_to_bind': 'color_dark_khaki'}
{'function_definition': 'public static partial Color ColorDarkMagenta();', 'function_to_bind': 'color_dark_magenta'}
{'function_definition': 'public static partial Color ColorDarkOliveGreen();', 'function_to_bind': 'color_dark_olive_green'}
{'function_definition': 'public static partial Color ColorDarkOrange();', 'function_to_bind': 'color_dark_orange'}
{'function_definition': 'public static partial Color ColorDarkOrchid();', 'function_to_bind': 'color_dark_orchid'}
{'function_definition': 'public static partial Color ColorDarkRed();', 'function_to_bind': 'color_dark_red'}
{'function_definition': 'public static partial Color ColorDarkSalmon();', 'function_to_bind': 'color_dark_salmon'}
{'function_definition': 'public static partial Color ColorDarkSeaGreen();', 'function_to_bind': 'color_dark_sea_green'}
{'function_definition': 'public static partial Color ColorDarkSlateBlue();', 'function_to_bind': 'color_dark_slate_blue'}
{'function_definition': 'public static partial Color ColorDarkSlateGray();', 'function_to_bind': 'color_dark_slate_gray'}
{'function_definition': 'public static partial Color ColorDarkTurquoise();', 'function_to_bind': 'color_dark_turquoise'}
{'function_definition': 'public static partial Color ColorDarkViolet();', 'function_to_bind': 'color_dark_violet'}
{'function_definition': 'public static partial Color ColorDeepPink();', 'function_to_bind': 'color_deep_pink'}
{'function_definition': 'public static partial Color ColorDeepSkyBlue();', 'function_to_bind': 'color_deep_sky_blue'}
{'function_definition': 'public static partial Color ColorDimGray();', 'function_to_bind': 'color_dim_gray'}
{'function_definition': 'public static partial Color ColorDodgerBlue();', 'function_to_bind': 'color_dodger_blue'}
{'function_definition': 'public static partial Color ColorFirebrick();', 'function_to_bind': 'color_firebrick'}
{'function_definition': 'public static partial Color ColorFloralWhite();', 'function_to_bind': 'color_floral_white'}
{'function_definition': 'public static partial Color ColorForestGreen();', 'function_to_bind': 'color_forest_green'}
{'function_definition': 'public static partial Color ColorFuchsia();', 'function_to_bind': 'color_fuchsia'}
{'function_definition': 'public static partial Color ColorGainsboro();', 'function_to_bind': 'color_gainsboro'}
{'function_definition': 'public static partial Color ColorGhostWhite();', 'function_to_bind': 'color_ghost_white'}
{'function_definition': 'public static partial Color ColorGold();', 'function_to_bind': 'color_gold'}
{'function_definition': 'public static partial Color ColorGoldenrod();', 'function_to_bind': 'color_goldenrod'}
{'function_definition': 'public static partial Color ColorGray();', 'function_to_bind': 'color_gray'}
{'function_definition': 'public static partial Color ColorGreen();', 'function_to_bind': 'color_green'}
{'function_definition': 'public static partial Color ColorGreenYellow();', 'function_to_bind': 'color_green_yellow'}
{'function_definition': 'public static partial Color ColorHoneydew();', 'function_to_bind': 'color_honeydew'}
{'function_definition': 'public static partial Color ColorHotPink();', 'function_to_bind': 'color_hot_pink'}
{'function_definition': 'public static partial Color ColorIndianRed();', 'function_to_bind': 'color_indian_red'}
{'function_definition': 'public static partial Color ColorIndigo();', 'function_to_bind': 'color_indigo'}
{'function_definition': 'public static partial Color ColorIvory();', 'function_to_bind': 'color_ivory'}
{'function_definition': 'public static partial Color ColorKhaki();', 'function_to_bind': 'color_khaki'}
{'function_definition': 'public static partial Color ColorLavender();', 'function_to_bind': 'color_lavender'}
{'function_definition': 'public static partial Color ColorLavenderBlush();', 'function_to_bind': 'color_lavender_blush'}
{'function_definition': 'public static partial Color ColorLawnGreen();', 'function_to_bind': 'color_lawn_green'}
{'function_definition': 'public static partial Color ColorLemonChiffon();', 'function_to_bind': 'color_lemon_chiffon'}
{'function_definition': 'public static partial Color ColorLightBlue();', 'function_to_bind': 'color_light_blue'}
{'function_definition': 'public static partial Color ColorLightCoral();', 'function_to_bind': 'color_light_coral'}
{'function_definition': 'public static partial Color ColorLightCyan();', 'function_to_bind': 'color_light_cyan'}
{'function_definition': 'public static partial Color ColorLightGoldenrodYellow();', 'function_to_bind': 'color_light_goldenrod_yellow'}
{'function_definition': 'public static partial Color ColorLightGray();', 'function_to_bind': 'color_light_gray'}
{'function_definition': 'public static partial Color ColorLightGreen();', 'function_to_bind': 'color_light_green'}
{'function_definition': 'public static partial Color ColorLightPink();', 'function_to_bind': 'color_light_pink'}
{'function_definition': 'public static partial Color ColorLightSalmon();', 'function_to_bind': 'color_light_salmon'}
{'function_definition': 'public static partial Color ColorLightSeaGreen();', 'function_to_bind': 'color_light_sea_green'}
{'function_definition': 'public static partial Color ColorLightSkyBlue();', 'function_to_bind': 'color_light_sky_blue'}
{'function_definition': 'public static partial Color ColorLightSlateGray();', 'function_to_bind': 'color_light_slate_gray'}
{'function_definition': 'public static partial Color ColorLightSteelBlue();', 'function_to_bind': 'color_light_steel_blue'}
{'function_definition': 'public static partial Color ColorLightYellow();', 'function_to_bind': 'color_light_yellow'}
{'function_definition': 'public static partial Color ColorLime();', 'function_to_bind': 'color_lime'}
{'function_definition': 'public static partial Color ColorLimeGreen();', 'function_to_bind': 'color_lime_green'}
{'function_definition': 'public static partial Color ColorLinen();', 'function_to_bind': 'color_linen'}
{'function_definition': 'public static partial Color ColorMagenta();', 'function_to_bind': 'color_magenta'}
{'function_definition': 'public static partial Color ColorMaroon();', 'function_to_bind': 'color_maroon'}
{'function_definition': 'public static partial Color ColorMediumAquamarine();', 'function_to_bind': 'color_medium_aquamarine'}
{'function_definition': 'public static partial Color ColorMediumBlue();', 'function_to_bind': 'color_medium_blue'}
{'function_definition': 'public static partial Color ColorMediumOrchid();', 'function_to_bind': 'color_medium_orchid'}
{'function_definition': 'public static partial Color ColorMediumPurple();', 'function_to_bind': 'color_medium_purple'}
{'function_definition': 'public static partial Color ColorMediumSeaGreen();', 'function_to_bind': 'color_medium_sea_green'}
{'function_definition': 'public static partial Color ColorMediumSlateBlue();', 'function_to_bind': 'color_medium_slate_blue'}
{'function_definition': 'public static partial Color ColorMediumSpringGreen();', 'function_to_bind': 'color_medium_spring_green'}
{'function_definition': 'public static partial Color ColorMediumTurquoise();', 'function_to_bind': 'color_medium_turquoise'}
{'function_definition': 'public static partial Color ColorMediumVioletRed();', 'function_to_bind': 'color_medium_violet_red'}
{'function_definition': 'public static partial Color ColorMidnightBlue();', 'function_to_bind': 'color_midnight_blue'}
{'function_definition': 'public static partial Color ColorMintCream();', 'function_to_bind': 'color_mint_cream'}
{'function_definition': 'public static partial Color ColorMistyRose();', 'function_to_bind': 'color_misty_rose'}
{'function_definition': 'public static partial Color ColorMoccasin();', 'function_to_bind': 'color_moccasin'}
{'function_definition': 'public static partial Color ColorNavajoWhite();', 'function_to_bind': 'color_navajo_white'}
{'function_definition': 'public static partial Color ColorNavy();', 'function_to_bind': 'color_navy'}
{'function_definition': 'public static partial Color ColorOldLace();', 'function_to_bind': 'color_old_lace'}
{'function_definition': 'public static partial Color ColorOlive();', 'function_to_bind': 'color_olive'}
{'function_definition': 'public static partial Color ColorOliveDrab();', 'function_to_bind': 'color_olive_drab'}
{'function_definition': 'public static partial Color ColorOrange();', 'function_to_bind': 'color_orange'}
{'function_definition': 'public static partial Color ColorOrangeRed();', 'function_to_bind': 'color_orange_red'}
{'function_definition': 'public static partial Color ColorOrchid();', 'function_to_bind': 'color_orchid'}
{'function_definition': 'public static partial Color ColorPaleGoldenrod();', 'function_to_bind': 'color_pale_goldenrod'}
{'function_definition': 'public static partial Color ColorPaleGreen();', 'function_to_bind': 'color_pale_green'}
{'function_definition': 'public static partial Color ColorPaleTurquoise();', 'function_to_bind': 'color_pale_turquoise'}
{'function_definition': 'public static partial Color ColorPaleVioletRed();', 'function_to_bind': 'color_pale_violet_red'}
{'function_definition': 'public static partial Color ColorPapayaWhip();', 'function_to_bind': 'color_papaya_whip'}
{'function_definition': 'public static partial Color ColorPeachPuff();', 'function_to_bind': 'color_peach_puff'}
{'function_definition': 'public static partial Color ColorPeru();', 'function_to_bind': 'color_peru'}
{'function_definition': 'public static partial Color ColorPink();', 'function_to_bind': 'color_pink'}
{'function_definition': 'public static partial Color ColorPlum();', 'function_to_bind': 'color_plum'}
{'function_definition': 'public static partial Color ColorPowderBlue();', 'function_to_bind': 'color_powder_blue'}
{'function_definition': 'public static partial Color ColorPurple();', 'function_to_bind': 'color_purple'}
{'function_definition': 'public static partial Color ColorRed();', 'function_to_bind': 'color_red'}
{'function_definition': 'public static partial Color ColorRosyBrown();', 'function_to_bind': 'color_rosy_brown'}
{'function_definition': 'public static partial Color ColorRoyalBlue();', 'function_to_bind': 'color_royal_blue'}
{'function_definition': 'public static partial Color ColorSaddleBrown();', 'function_to_bind': 'color_saddle_brown'}
{'function_definition': 'public static partial Color ColorSalmon();', 'function_to_bind': 'color_salmon'}
{'function_definition': 'public static partial Color ColorSandyBrown();', 'function_to_bind': 'color_sandy_brown'}
{'function_definition': 'public static partial Color ColorSeaGreen();', 'function_to_bind': 'color_sea_green'}
{'function_definition': 'public static partial Color ColorSeaShell();', 'function_to_bind': 'color_sea_shell'}
{'function_definition': 'public static partial Color ColorSienna();', 'function_to_bind': 'color_sienna'}
{'function_definition': 'public static partial Color ColorSilver();', 'function_to_bind': 'color_silver'}
{'function_definition': 'public static partial Color ColorSkyBlue();', 'function_to_bind': 'color_sky_blue'}
{'function_definition': 'public static partial Color ColorSlateBlue();', 'function_to_bind': 'color_slate_blue'}
{'function_definition': 'public static partial Color ColorSlateGray();', 'function_to_bind': 'color_slate_gray'}
{'function_definition': 'public static partial Color ColorSnow();', 'function_to_bind': 'color_snow'}
{'function_definition': 'public static partial Color ColorSpringGreen();', 'function_to_bind': 'color_spring_green'}
{'function_definition': 'public static partial Color ColorSteelBlue();', 'function_to_bind': 'color_steel_blue'}
{'function_definition': 'public static partial Color ColorSwinburneRed();', 'function_to_bind': 'color_swinburne_red'}
{'function_definition': 'public static partial Color ColorTan();', 'function_to_bind': 'color_tan'}
{'function_definition': 'public static partial Color ColorTeal();', 'function_to_bind': 'color_teal'}
{'function_definition': 'public static partial Color ColorThistle();', 'function_to_bind': 'color_thistle'}
{'function_definition': 'public static partial string ColorToString(Color c);', 'function_to_bind': 'color_to_string'}
{'function_definition': 'public static partial Color ColorTomato();', 'function_to_bind': 'color_tomato'}
{'function_definition': 'public static partial Color ColorTransparent();', 'function_to_bind': 'color_transparent'}
{'function_definition': 'public static partial Color ColorTurquoise();', 'function_to_bind': 'color_turquoise'}
{'function_definition': 'public static partial Color ColorViolet();', 'function_to_bind': 'color_violet'}
{'function_definition': 'public static partial Color ColorWheat();', 'function_to_bind': 'color_wheat'}
{'function_definition': 'public static partial Color ColorWhite();', 'function_to_bind': 'color_white'}
{'function_definition': 'public static partial Color ColorWhiteSmoke();', 'function_to_bind': 'color_white_smoke'}
{'function_definition': 'public static partial Color ColorYellow();', 'function_to_bind': 'color_yellow'}
{'function_definition': 'public static partial Color ColorYellowGreen();', 'function_to_bind': 'color_yellow_green'}
{'function_definition': 'public static partial int GreenOf(Color c);', 'function_to_bind': 'green_of'}
{'function_definition': 'public static partial Color HSBColor(double hue, double saturation, double brightness);', 'function_to_bind': 'hsb_color'}
{'function_definition': 'public static partial double HueOf(Color c);', 'function_to_bind': 'hue_of'}
{'function_definition': 'public static partial Color RandomColor();', 'function_to_bind': 'random_color'}
{'function_definition': 'public static partial Color RandomRGBColor(int alpha);', 'function_to_bind': 'random_rgb_color'}
{'function_definition': 'public static partial int RedOf(Color c);', 'function_to_bind': 'red_of'}
{'function_definition': 'public static partial Color RGBColor(double red, double green, double blue);', 'function_to_bind': 'rgb_color'}
{'function_definition': 'public static partial Color RGBColor(int red, int green, int blue);', 'function_to_bind': 'rgb_color'}
{'function_definition': 'public static partial Color RGBAColor(double red, double green, double blue, double alpha);', 'function_to_bind': 'rgba_color'}
{'function_definition': 'public static partial Color RGBAColor(int red, int green, int blue, int alpha);', 'function_to_bind': 'rgba_color'}
{'function_definition': 'public static partial double SaturationOf(Color c);', 'function_to_bind': 'saturation_of'}
{'function_definition': 'public static partial Color StringToColor(string str);', 'function_to_bind': 'string_to_color'}
{'function_definition': 'public static partial Point2D CenterPoint(Circle c);', 'function_to_bind': 'center_point'}
{'function_definition': 'public static partial Circle CircleAt(Point2D pt, double radius);', 'function_to_bind': 'circle_at'}
{'function_definition': 'public static partial Circle CircleAt(double x, double y, double radius);', 'function_to_bind': 'circle_at'}
{'function_definition': 'public static partial bool CircleQuadIntersect(Circle c, Quad q);', 'function_to_bind': 'circle_quad_intersect'}
{'function_definition': 'public static partial float CircleRadius(Circle c);', 'function_to_bind': 'circle_radius'}
{'function_definition': 'public static partial bool CircleRayIntersection(Point2D origin, Vector2D heading, Circle circ);', 'function_to_bind': 'circle_ray_intersection'}
{'function_definition': 'public static partial bool CircleRayIntersection(Point2D origin, Vector2D heading, Circle circ, ref Point2D hitPoint, ref double hitDistance);', 'function_to_bind': 'circle_ray_intersection'}
{'function_definition': 'public static partial bool CircleTriangleIntersect(Circle c, Triangle tri);', 'function_to_bind': 'circle_triangle_intersect'}
{'function_definition': 'public static partial bool CircleTriangleIntersect(Circle c, Triangle tri, ref Point2D p);', 'function_to_bind': 'circle_triangle_intersect'}
{'function_definition': 'public static partial float CircleX(Circle c);', 'function_to_bind': 'circle_x'}
{'function_definition': 'public static partial float CircleY(Circle c);', 'function_to_bind': 'circle_y'}
{'function_definition': 'public static partial bool CirclesIntersect(Circle c1, Circle c2);', 'function_to_bind': 'circles_intersect'}
{'function_definition': 'public static partial bool CirclesIntersect(double c1X, double c1Y, double c1Radius, double c2X, double c2Y, double c2Radius);', 'function_to_bind': 'circles_intersect'}
{'function_definition': 'public static partial Point2D ClosestPointOnCircle(Point2D fromPt, Circle c);', 'function_to_bind': 'closest_point_on_circle'}
{'function_definition': 'public static partial Point2D ClosestPointOnLineFromCircle(Circle c, Line l);', 'function_to_bind': 'closest_point_on_line_from_circle'}
{'function_definition': 'public static partial Point2D ClosestPointOnRectFromCircle(Circle c, Rectangle rect);', 'function_to_bind': 'closest_point_on_rect_from_circle'}
{'function_definition': 'public static partial Point2D ClosestPointOnTriangleFromCircle(Circle c, Triangle tri);', 'function_to_bind': 'closest_point_on_triangle_from_circle'}
{'function_definition': 'public static partial Point2D DistantPointOnCircle(Point2D pt, Circle c);', 'function_to_bind': 'distant_point_on_circle'}
{'function_definition': 'public static partial bool DistantPointOnCircleHeading(Point2D pt, Circle c, Vector2D heading, ref Point2D oppositePt);', 'function_to_bind': 'distant_point_on_circle_heading'}
{'function_definition': 'public static partial float RayCircleIntersectDistance(Point2D rayOrigin, Vector2D rayHeading, Circle c);', 'function_to_bind': 'ray_circle_intersect_distance'}
{'function_definition': 'public static partial bool TangentPoints(Point2D fromPt, Circle c, ref Point2D p1, ref Point2D p2);', 'function_to_bind': 'tangent_points'}
{'function_definition': 'public static partial void WidestPoints(Circle c, Vector2D along, ref Point2D pt1, ref Point2D pt2);', 'function_to_bind': 'widest_points'}
{'function_definition': 'public static partial float Cosine(float degrees);', 'function_to_bind': 'cosine'}
{'function_definition': 'public static partial float Sine(float degrees);', 'function_to_bind': 'sine'}
{'function_definition': 'public static partial float Tangent(float degrees);', 'function_to_bind': 'tangent'}
{'function_definition': 'public static partial Point2D ClosestPointOnLine(Point2D fromPt, Line l);', 'function_to_bind': 'closest_point_on_line'}
{'function_definition': 'public static partial Point2D ClosestPointOnLines(Point2D fromPt, List<Line> lines, ref int lineIdx);', 'function_to_bind': 'closest_point_on_lines'}
{'function_definition': 'public static partial Line LineFrom(Point2D start, Point2D endPt);', 'function_to_bind': 'line_from'}
{'function_definition': 'public static partial Line LineFrom(Point2D start, Vector2D offset);', 'function_to_bind': 'line_from'}
{'function_definition': 'public static partial Line LineFrom(Vector2D v);', 'function_to_bind': 'line_from'}
{'function_definition': 'public static partial Line LineFrom(double x1, double y1, double x2, double y2);', 'function_to_bind': 'line_from'}
{'function_definition': 'public static partial bool LineIntersectionPoint(Line line1, Line line2, ref Point2D pt);', 'function_to_bind': 'line_intersection_point'}
{'function_definition': 'public static partial bool LineIntersectsCircle(Line l, Circle c);', 'function_to_bind': 'line_intersects_circle'}
{'function_definition': 'public static partial bool LineIntersectsLines(Line l, List<Line> lines);', 'function_to_bind': 'line_intersects_lines'}
{'function_definition': 'public static partial bool LineIntersectsRect(Line l, Rectangle rect);', 'function_to_bind': 'line_intersects_rect'}
{'function_definition': 'public static partial float LineLength(Line l);', 'function_to_bind': 'line_length'}
{'function_definition': 'public static partial float LineLengthSquared(Line l);', 'function_to_bind': 'line_length_squared'}
{'function_definition': 'public static partial Point2D LineMidPoint(Line l);', 'function_to_bind': 'line_mid_point'}
{'function_definition': 'public static partial Vector2D LineNormal(Line l);', 'function_to_bind': 'line_normal'}
{'function_definition': 'public static partial string LineToString(Line ln);', 'function_to_bind': 'line_to_string'}
{'function_definition': 'public static partial List<Line> LinesFrom(Rectangle rect);', 'function_to_bind': 'lines_from'}
{'function_definition': 'public static partial List<Line> LinesFrom(Triangle t);', 'function_to_bind': 'lines_from'}
{'function_definition': 'public static partial bool LinesIntersect(Line l1, Line l2);', 'function_to_bind': 'lines_intersect'}
{'function_definition': 'public static partial Point2D PointAt(double x, double y);', 'function_to_bind': 'point_at'}
{'function_definition': 'public static partial Point2D PointAtOrigin();', 'function_to_bind': 'point_at_origin'}
{'function_definition': 'public static partial bool PointInCircle(Point2D pt, Circle c);', 'function_to_bind': 'point_in_circle'}
{'function_definition': 'public static partial bool PointInCircle(double ptx, double pty, double cx, double cy, double radius);', 'function_to_bind': 'point_in_circle'}
{'function_definition': 'public static partial bool PointInQuad(Point2D pt, Quad q);', 'function_to_bind': 'point_in_quad'}
{'function_definition': 'public static partial bool PointInRectangle(Point2D pt, Rectangle rect);', 'function_to_bind': 'point_in_rectangle'}
{'function_definition': 'public static partial bool PointInRectangle(double ptx, double pty, double rectX, double rectY, double rectWidth, double rectHeight);', 'function_to_bind': 'point_in_rectangle'}
{'function_definition': 'public static partial bool PointInTriangle(Point2D pt, Triangle tri);', 'function_to_bind': 'point_in_triangle'}
{'function_definition': 'public static partial float PointLineDistance(Point2D pt, Line l);', 'function_to_bind': 'point_line_distance'}
{'function_definition': 'public static partial Point2D PointOffsetBy(Point2D startPoint, Vector2D offset);', 'function_to_bind': 'point_offset_by'}
{'function_definition': 'public static partial Point2D PointOffsetFromOrigin(Vector2D offset);', 'function_to_bind': 'point_offset_from_origin'}
{'function_definition': 'public static partial bool PointOnLine(Point2D pt, Line l);', 'function_to_bind': 'point_on_line'}
{'function_definition': 'public static partial bool PointOnLine(Point2D pt, Line l, float proximity);', 'function_to_bind': 'point_on_line'}
{'function_definition': 'public static partial float PointPointAngle(Point2D pt1, Point2D pt2);', 'function_to_bind': 'point_point_angle'}
{'function_definition': 'public static partial double PointPointDistance(Point2D pt1, Point2D pt2);', 'function_to_bind': 'point_point_distance'}
{'function_definition': 'public static partial string PointToString(Point2D pt);', 'function_to_bind': 'point_to_string'}
{'function_definition': 'public static partial Point2D RandomBitmapPoint(Bitmap bmp);', 'function_to_bind': 'random_bitmap_point'}
{'function_definition': 'public static partial Point2D RandomScreenPoint();', 'function_to_bind': 'random_screen_point'}
{'function_definition': 'public static partial Point2D RandomWindowPoint(Window wind);', 'function_to_bind': 'random_window_point'}
{'function_definition': 'public static partial bool SamePoint(Point2D pt1, Point2D pt2);', 'function_to_bind': 'same_point'}
{'function_definition': 'public static partial Quad QuadFrom(Point2D lineOrigin, Point2D lineEnd, double width);', 'function_to_bind': 'quad_from'}
{'function_definition': 'public static partial Quad QuadFrom(Point2D p1, Point2D p2, Point2D p3, Point2D p4);', 'function_to_bind': 'quad_from'}
{'function_definition': 'public static partial Quad QuadFrom(Rectangle rect);', 'function_to_bind': 'quad_from'}
{'function_definition': 'public static partial Quad QuadFrom(Rectangle rect, Matrix2D transform);', 'function_to_bind': 'quad_from'}
{'function_definition': 'public static partial Quad QuadFrom(double xTopLeft, double yTopLeft, double xTopRight, double yTopRight, double xBottomLeft, double yBottomLeft, double xBottomRight, double yBottomRight);', 'function_to_bind': 'quad_from'}
{'function_definition': 'public static partial bool QuadRayIntersection(Point2D origin, Vector2D heading, Quad q);', 'function_to_bind': 'quad_ray_intersection'}
{'function_definition': 'public static partial bool QuadRayIntersection(Point2D origin, Vector2D heading, Quad q, ref Point2D hitPoint, ref double hitDistance);', 'function_to_bind': 'quad_ray_intersection'}
{'function_definition': 'public static partial bool QuadsIntersect(Quad q1, Quad q2);', 'function_to_bind': 'quads_intersect'}
{'function_definition': 'public static partial void SetQuadPoint(ref Quad q, int idx, Point2D value);', 'function_to_bind': 'set_quad_point'}
{'function_definition': 'public static partial List<Triangle> TrianglesFrom(Quad q);', 'function_to_bind': 'triangles_from'}
{'function_definition': 'public static partial Rectangle InsetRectangle(Rectangle rect, float insetAmount);', 'function_to_bind': 'inset_rectangle'}
{'function_definition': 'public static partial Rectangle Intersection(Rectangle rect1, Rectangle rect2);', 'function_to_bind': 'intersection'}
{'function_definition': 'public static partial Rectangle RectangleAround(Circle c);', 'function_to_bind': 'rectangle_around'}
{'function_definition': 'public static partial Rectangle RectangleAround(Line l);', 'function_to_bind': 'rectangle_around'}
{'function_definition': 'public static partial Rectangle RectangleAround(Quad q);', 'function_to_bind': 'rectangle_around'}
{'function_definition': 'public static partial Rectangle RectangleAround(Triangle t);', 'function_to_bind': 'rectangle_around'}
{'function_definition': 'public static partial double RectangleBottom(Rectangle rect);', 'function_to_bind': 'rectangle_bottom'}
{'function_definition': 'public static partial Point2D RectangleCenter(Rectangle rect);', 'function_to_bind': 'rectangle_center'}
{'function_definition': 'public static partial bool RectangleCircleIntersect(Rectangle rect, Circle c);', 'function_to_bind': 'rectangle_circle_intersect'}
{'function_definition': 'public static partial Rectangle RectangleFrom(Point2D pt, double width, double height);', 'function_to_bind': 'rectangle_from'}
{'function_definition': 'public static partial Rectangle RectangleFrom(Point2D pt1, Point2D pt2);', 'function_to_bind': 'rectangle_from'}
{'function_definition': 'public static partial Rectangle RectangleFrom(double x, double y, double width, double height);', 'function_to_bind': 'rectangle_from'}
{'function_definition': 'public static partial double RectangleLeft(Rectangle rect);', 'function_to_bind': 'rectangle_left'}
{'function_definition': 'public static partial Rectangle RectangleOffsetBy(Rectangle rect, Vector2D offset);', 'function_to_bind': 'rectangle_offset_by'}
{'function_definition': 'public static partial bool RectangleRayIntersection(Point2D origin, Vector2D heading, Rectangle rect);', 'function_to_bind': 'rectangle_ray_intersection'}
{'function_definition': 'public static partial bool RectangleRayIntersection(Point2D origin, Vector2D heading, Rectangle rect, ref Point2D hitPoint, ref double hitDistance);', 'function_to_bind': 'rectangle_ray_intersection'}
{'function_definition': 'public static partial double RectangleRight(Rectangle rect);', 'function_to_bind': 'rectangle_right'}
{'function_definition': 'public static partial string RectangleToString(Rectangle rect);', 'function_to_bind': 'rectangle_to_string'}
{'function_definition': 'public static partial double RectangleTop(Rectangle rect);', 'function_to_bind': 'rectangle_top'}
{'function_definition': 'public static partial bool RectanglesIntersect(Rectangle rect1, Rectangle rect2);', 'function_to_bind': 'rectangles_intersect'}
{'function_definition': 'public static partial Point2D TriangleBarycenter(Triangle tri);', 'function_to_bind': 'triangle_barycenter'}
{'function_definition': 'public static partial Triangle TriangleFrom(Point2D p1, Point2D p2, Point2D p3);', 'function_to_bind': 'triangle_from'}
{'function_definition': 'public static partial Triangle TriangleFrom(double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'triangle_from'}
{'function_definition': 'public static partial bool TriangleQuadIntersect(Triangle tri, Quad q);', 'function_to_bind': 'triangle_quad_intersect'}
{'function_definition': 'public static partial bool TriangleRayIntersection(Point2D origin, Vector2D heading, Triangle tri);', 'function_to_bind': 'triangle_ray_intersection'}
{'function_definition': 'public static partial bool TriangleRayIntersection(Point2D origin, Vector2D heading, Triangle tri, ref Point2D hitPoint, ref double hitDistance);', 'function_to_bind': 'triangle_ray_intersection'}
{'function_definition': 'public static partial bool TriangleRectangleIntersect(Triangle tri, Rectangle rect);', 'function_to_bind': 'triangle_rectangle_intersect'}
{'function_definition': 'public static partial string TriangleToString(Triangle tri);', 'function_to_bind': 'triangle_to_string'}
{'function_definition': 'public static partial bool TrianglesIntersect(Triangle t1, Triangle t2);', 'function_to_bind': 'triangles_intersect'}
{'function_definition': 'public static partial void DrawCircle(Color clr, Circle c);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public static partial void DrawCircle(Color clr, Circle c, DrawingOptions opts);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public static partial void DrawCircle(Color clr, Point2D pt, double radius);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public static partial void DrawCircle(Color clr, Point2D pt, double radius, DrawingOptions opts);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public static partial void DrawCircle(Color clr, double x, double y, double radius);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public static partial void DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public static partial void DrawCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius);', 'function_to_bind': 'draw_circle_on_bitmap'}
{'function_definition': 'public static partial void DrawCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'draw_circle_on_bitmap'}
{'function_definition': 'public static partial void DrawCircleOnWindow(Window destination, Color clr, double x, double y, double radius);', 'function_to_bind': 'draw_circle_on_window'}
{'function_definition': 'public static partial void DrawCircleOnWindow(Window destination, Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'draw_circle_on_window'}
{'function_definition': 'public static partial void FillCircle(Color clr, Circle c);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public static partial void FillCircle(Color clr, Circle c, DrawingOptions opts);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public static partial void FillCircle(Color clr, Point2D pt, double radius);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public static partial void FillCircle(Color clr, Point2D pt, double radius, DrawingOptions opts);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public static partial void FillCircle(Color clr, double x, double y, double radius);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public static partial void FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public static partial void FillCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius);', 'function_to_bind': 'fill_circle_on_bitmap'}
{'function_definition': 'public static partial void FillCircleOnBitmap(Bitmap destination, Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'fill_circle_on_bitmap'}
{'function_definition': 'public static partial void FillCircleOnWindow(Window destination, Color clr, double x, double y, double radius);', 'function_to_bind': 'fill_circle_on_window'}
{'function_definition': 'public static partial void FillCircleOnWindow(Window destination, Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'fill_circle_on_window'}
{'function_definition': 'public static partial Rectangle CurrentClip();', 'function_to_bind': 'current_clip'}
{'function_definition': 'public static partial Rectangle CurrentClip(Bitmap bmp);', 'function_to_bind': 'current_clip'}
{'function_definition': 'public static partial Rectangle CurrentClip(Window wnd);', 'function_to_bind': 'current_clip'}
{'function_definition': 'public static partial void PopClip(Window wnd);', 'function_to_bind': 'pop_clip'}
{'function_definition': 'public static partial void PopClip();', 'function_to_bind': 'pop_clip'}
{'function_definition': 'public static partial void PopClip(Bitmap bmp);', 'function_to_bind': 'pop_clip'}
{'function_definition': 'public static partial void PushClip(Window wnd, Rectangle r);', 'function_to_bind': 'push_clip'}
{'function_definition': 'public static partial void PushClip(Bitmap bmp, Rectangle r);', 'function_to_bind': 'push_clip'}
{'function_definition': 'public static partial void PushClip(Rectangle r);', 'function_to_bind': 'push_clip'}
{'function_definition': 'public static partial void ResetClip(Bitmap bmp);', 'function_to_bind': 'reset_clip'}
{'function_definition': 'public static partial void ResetClip();', 'function_to_bind': 'reset_clip'}
{'function_definition': 'public static partial void ResetClip(Window wnd);', 'function_to_bind': 'reset_clip'}
{'function_definition': 'public static partial void SetClip(Rectangle r);', 'function_to_bind': 'set_clip'}
{'function_definition': 'public static partial void SetClip(Bitmap bmp, Rectangle r);', 'function_to_bind': 'set_clip'}
{'function_definition': 'public static partial void SetClip(Window wnd, Rectangle r);', 'function_to_bind': 'set_clip'}
{'function_definition': 'public static partial DrawingOptions OptionDefaults();', 'function_to_bind': 'option_defaults'}
{'function_definition': 'public static partial DrawingOptions OptionDrawTo(Bitmap dest);', 'function_to_bind': 'option_draw_to'}
{'function_definition': 'public static partial DrawingOptions OptionDrawTo(Bitmap dest, DrawingOptions opts);', 'function_to_bind': 'option_draw_to'}
{'function_definition': 'public static partial DrawingOptions OptionDrawTo(Window dest);', 'function_to_bind': 'option_draw_to'}
{'function_definition': 'public static partial DrawingOptions OptionDrawTo(Window dest, DrawingOptions opts);', 'function_to_bind': 'option_draw_to'}
{'function_definition': 'public static partial DrawingOptions OptionFlipX();', 'function_to_bind': 'option_flip_x'}
{'function_definition': 'public static partial DrawingOptions OptionFlipX(DrawingOptions opts);', 'function_to_bind': 'option_flip_x'}
{'function_definition': 'public static partial DrawingOptions OptionFlipXy();', 'function_to_bind': 'option_flip_xy'}
{'function_definition': 'public static partial DrawingOptions OptionFlipXy(DrawingOptions opts);', 'function_to_bind': 'option_flip_xy'}
{'function_definition': 'public static partial DrawingOptions OptionFlipY();', 'function_to_bind': 'option_flip_y'}
{'function_definition': 'public static partial DrawingOptions OptionFlipY(DrawingOptions opts);', 'function_to_bind': 'option_flip_y'}
{'function_definition': 'public static partial DrawingOptions OptionLineWidth(int width);', 'function_to_bind': 'option_line_width'}
{'function_definition': 'public static partial DrawingOptions OptionLineWidth(int width, DrawingOptions opts);', 'function_to_bind': 'option_line_width'}
{'function_definition': 'public static partial DrawingOptions OptionPartBmp(double x, double y, double w, double h);', 'function_to_bind': 'option_part_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionPartBmp(double x, double y, double w, double h, DrawingOptions opts);', 'function_to_bind': 'option_part_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionPartBmp(Rectangle part);', 'function_to_bind': 'option_part_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionPartBmp(Rectangle part, DrawingOptions opts);', 'function_to_bind': 'option_part_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionRotateBmp(double angle);', 'function_to_bind': 'option_rotate_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionRotateBmp(double angle, double anchorX, double anchorY);', 'function_to_bind': 'option_rotate_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionRotateBmp(double angle, double anchorX, double anchorY, DrawingOptions opts);', 'function_to_bind': 'option_rotate_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionRotateBmp(double angle, DrawingOptions opts);', 'function_to_bind': 'option_rotate_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionScaleBmp(double scaleX, double scaleY);', 'function_to_bind': 'option_scale_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionScaleBmp(double scaleX, double scaleY, DrawingOptions opts);', 'function_to_bind': 'option_scale_bmp'}
{'function_definition': 'public static partial DrawingOptions OptionToScreen();', 'function_to_bind': 'option_to_screen'}
{'function_definition': 'public static partial DrawingOptions OptionToScreen(DrawingOptions opts);', 'function_to_bind': 'option_to_screen'}
{'function_definition': 'public static partial DrawingOptions OptionToWorld();', 'function_to_bind': 'option_to_world'}
{'function_definition': 'public static partial DrawingOptions OptionToWorld(DrawingOptions opts);', 'function_to_bind': 'option_to_world'}
{'function_definition': 'public static partial DrawingOptions OptionWithAnimation(Animation anim);', 'function_to_bind': 'option_with_animation'}
{'function_definition': 'public static partial DrawingOptions OptionWithAnimation(Animation anim, DrawingOptions opts);', 'function_to_bind': 'option_with_animation'}
{'function_definition': 'public static partial DrawingOptions OptionWithBitmapCell(int cell);', 'function_to_bind': 'option_with_bitmap_cell'}
{'function_definition': 'public static partial DrawingOptions OptionWithBitmapCell(int cell, DrawingOptions opts);', 'function_to_bind': 'option_with_bitmap_cell'}
{'function_definition': 'public static partial void DrawEllipse(Color clr, Rectangle rect);', 'function_to_bind': 'draw_ellipse'}
{'function_definition': 'public static partial void DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse'}
{'function_definition': 'public static partial void DrawEllipse(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_ellipse'}
{'function_definition': 'public static partial void DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse'}
{'function_definition': 'public static partial void DrawEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public static partial void DrawEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public static partial void DrawEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public static partial void DrawEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public static partial void DrawEllipseOnWindow(Window destination, Color clr, Rectangle rect);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public static partial void DrawEllipseOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public static partial void DrawEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public static partial void DrawEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public static partial void FillEllipse(Color clr, Rectangle rect);', 'function_to_bind': 'fill_ellipse'}
{'function_definition': 'public static partial void FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse'}
{'function_definition': 'public static partial void FillEllipse(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_ellipse'}
{'function_definition': 'public static partial void FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse'}
{'function_definition': 'public static partial void FillEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public static partial void FillEllipseOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public static partial void FillEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public static partial void FillEllipseOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public static partial void FillEllipseOnWindow(Window destination, Color clr, Rectangle rect);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public static partial void FillEllipseOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public static partial void FillEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public static partial void FillEllipseOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public static partial void ClearScreen();', 'function_to_bind': 'clear_screen'}
{'function_definition': 'public static partial void ClearScreen(Color clr);', 'function_to_bind': 'clear_screen'}
{'function_definition': 'public static partial Display DisplayDetails(uint index);', 'function_to_bind': 'display_details'}
{'function_definition': 'public static partial int DisplayHeight(Display disp);', 'function_to_bind': 'display_height'}
{'function_definition': 'public static partial string DisplayName(Display disp);', 'function_to_bind': 'display_name'}
{'function_definition': 'public static partial int DisplayWidth(Display disp);', 'function_to_bind': 'display_width'}
{'function_definition': 'public static partial int DisplayX(Display disp);', 'function_to_bind': 'display_x'}
{'function_definition': 'public static partial int DisplayY(Display disp);', 'function_to_bind': 'display_y'}
{'function_definition': 'public static partial int NumberOfDisplays();', 'function_to_bind': 'number_of_displays'}
{'function_definition': 'public static partial void RefreshScreen();', 'function_to_bind': 'refresh_screen'}
{'function_definition': 'public static partial void RefreshScreen(uint targetFps);', 'function_to_bind': 'refresh_screen'}
{'function_definition': 'public static partial void SaveBitmap(Bitmap bmp, string basename);', 'function_to_bind': 'save_bitmap'}
{'function_definition': 'public static partial int ScreenHeight();', 'function_to_bind': 'screen_height'}
{'function_definition': 'public static partial int ScreenWidth();', 'function_to_bind': 'screen_width'}
{'function_definition': 'public static partial void TakeScreenshot(string basename);', 'function_to_bind': 'take_screenshot'}
{'function_definition': 'public static partial void TakeScreenshot(Window wind, string basename);', 'function_to_bind': 'take_screenshot'}
{'function_definition': 'public static partial Circle BitmapBoundingCircle(Bitmap bmp, Point2D pt);', 'function_to_bind': 'bitmap_bounding_circle'}
{'function_definition': 'public static partial Rectangle BitmapBoundingRectangle(Bitmap bmp);', 'function_to_bind': 'bitmap_bounding_rectangle'}
{'function_definition': 'public static partial Rectangle BitmapBoundingRectangle(Bitmap bmp, double x, double y);', 'function_to_bind': 'bitmap_bounding_rectangle'}
{'function_definition': 'public static partial Point2D BitmapCellCenter(Bitmap bmp);', 'function_to_bind': 'bitmap_cell_center'}
{'function_definition': 'public static partial Circle BitmapCellCircle(Bitmap bmp, double x, double y);', 'function_to_bind': 'bitmap_cell_circle'}
{'function_definition': 'public static partial Circle BitmapCellCircle(Bitmap bmp, Point2D pt);', 'function_to_bind': 'bitmap_cell_circle'}
{'function_definition': 'public static partial Circle BitmapCellCircle(Bitmap bmp, Point2D pt, double scale);', 'function_to_bind': 'bitmap_cell_circle'}
{'function_definition': 'public static partial int BitmapCellColumns(Bitmap bmp);', 'function_to_bind': 'bitmap_cell_columns'}
{'function_definition': 'public static partial int BitmapCellCount(Bitmap bmp);', 'function_to_bind': 'bitmap_cell_count'}
{'function_definition': 'public static partial int BitmapCellHeight(Bitmap bmp);', 'function_to_bind': 'bitmap_cell_height'}
{'function_definition': 'public static partial Vector2D BitmapCellOffset(Bitmap src, int cell);', 'function_to_bind': 'bitmap_cell_offset'}
{'function_definition': 'public static partial Rectangle BitmapCellRectangle(Bitmap src);', 'function_to_bind': 'bitmap_cell_rectangle'}
{'function_definition': 'public static partial Rectangle BitmapCellRectangle(Bitmap src, Point2D pt);', 'function_to_bind': 'bitmap_cell_rectangle'}
{'function_definition': 'public static partial int BitmapCellRows(Bitmap bmp);', 'function_to_bind': 'bitmap_cell_rows'}
{'function_definition': 'public static partial int BitmapCellWidth(Bitmap bmp);', 'function_to_bind': 'bitmap_cell_width'}
{'function_definition': 'public static partial Point2D BitmapCenter(Bitmap bmp);', 'function_to_bind': 'bitmap_center'}
{'function_definition': 'public static partial string BitmapFilename(Bitmap bmp);', 'function_to_bind': 'bitmap_filename'}
{'function_definition': 'public static partial int BitmapHeight(Bitmap bmp);', 'function_to_bind': 'bitmap_height'}
{'function_definition': 'public static partial int BitmapHeight(string name);', 'function_to_bind': 'bitmap_height'}
{'function_definition': 'public static partial string BitmapName(Bitmap bmp);', 'function_to_bind': 'bitmap_name'}
{'function_definition': 'public static partial Bitmap BitmapNamed(string name);', 'function_to_bind': 'bitmap_named'}
{'function_definition': 'public static partial Rectangle BitmapRectangleOfCell(Bitmap src, int cell);', 'function_to_bind': 'bitmap_rectangle_of_cell'}
{'function_definition': 'public static partial void BitmapSetCellDetails(Bitmap bmp, int width, int height, int columns, int rows, int count);', 'function_to_bind': 'bitmap_set_cell_details'}
{'function_definition': 'public static partial bool BitmapValid(Bitmap bmp);', 'function_to_bind': 'bitmap_valid'}
{'function_definition': 'public static partial int BitmapWidth(Bitmap bmp);', 'function_to_bind': 'bitmap_width'}
{'function_definition': 'public static partial int BitmapWidth(string name);', 'function_to_bind': 'bitmap_width'}
{'function_definition': 'public static partial void ClearBitmap(Bitmap bmp, Color clr);', 'function_to_bind': 'clear_bitmap'}
{'function_definition': 'public static partial void ClearBitmap(string name, Color clr);', 'function_to_bind': 'clear_bitmap'}
{'function_definition': 'public static partial Bitmap CreateBitmap(string name, int width, int height);', 'function_to_bind': 'create_bitmap'}
{'function_definition': 'public static partial void DrawBitmap(Bitmap bmp, double x, double y);', 'function_to_bind': 'draw_bitmap'}
{'function_definition': 'public static partial void DrawBitmap(Bitmap bmp, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap'}
{'function_definition': 'public static partial void DrawBitmap(string name, double x, double y);', 'function_to_bind': 'draw_bitmap'}
{'function_definition': 'public static partial void DrawBitmap(string name, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap'}
{'function_definition': 'public static partial void DrawBitmapOnBitmap(Bitmap destination, Bitmap bmp, double x, double y);', 'function_to_bind': 'draw_bitmap_on_bitmap'}
{'function_definition': 'public static partial void DrawBitmapOnBitmap(Bitmap destination, Bitmap bmp, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap_on_bitmap'}
{'function_definition': 'public static partial void DrawBitmapOnWindow(Window destination, Bitmap bmp, double x, double y);', 'function_to_bind': 'draw_bitmap_on_window'}
{'function_definition': 'public static partial void DrawBitmapOnWindow(Window destination, Bitmap bmp, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap_on_window'}
{'function_definition': 'public static partial void FreeAllBitmaps();', 'function_to_bind': 'free_all_bitmaps'}
{'function_definition': 'public static partial void FreeBitmap(Bitmap toDelete);', 'function_to_bind': 'free_bitmap'}
{'function_definition': 'public static partial bool HasBitmap(string name);', 'function_to_bind': 'has_bitmap'}
{'function_definition': 'public static partial Bitmap LoadBitmap(string name, string filename);', 'function_to_bind': 'load_bitmap'}
{'function_definition': 'public static partial bool PixelDrawnAtPoint(Bitmap bmp, Point2D pt);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public static partial bool PixelDrawnAtPoint(Bitmap bmp, double x, double y);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public static partial bool PixelDrawnAtPoint(Bitmap bmp, int cell, Point2D pt);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public static partial bool PixelDrawnAtPoint(Bitmap bmp, int cell, double x, double y);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public static partial void SetupCollisionMask(Bitmap bmp);', 'function_to_bind': 'setup_collision_mask'}
{'function_definition': 'public static partial void DrawLine(Color clr, Line l);', 'function_to_bind': 'draw_line'}
{'function_definition': 'public static partial void DrawLine(Color clr, Line l, DrawingOptions opts);', 'function_to_bind': 'draw_line'}
{'function_definition': 'public static partial void DrawLine(Color clr, Point2D fromPt, Point2D toPt);', 'function_to_bind': 'draw_line'}
{'function_definition': 'public static partial void DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);', 'function_to_bind': 'draw_line'}
{'function_definition': 'public static partial void DrawLine(Color clr, double x1, double y1, double x2, double y2);', 'function_to_bind': 'draw_line'}
{'function_definition': 'public static partial void DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);', 'function_to_bind': 'draw_line'}
{'function_definition': 'public static partial void DrawLineOnBitmap(Bitmap destination, Color clr, Line l);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public static partial void DrawLineOnBitmap(Bitmap destination, Color clr, Line l, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public static partial void DrawLineOnBitmap(Bitmap destination, Color clr, Point2D fromPt, Point2D toPt);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public static partial void DrawLineOnBitmap(Bitmap destination, Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public static partial void DrawLineOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public static partial void DrawLineOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public static partial void DrawLineOnWindow(Window destination, Color clr, Line l);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public static partial void DrawLineOnWindow(Window destination, Color clr, Line l, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public static partial void DrawLineOnWindow(Window destination, Color clr, Point2D fromPt, Point2D toPt);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public static partial void DrawLineOnWindow(Window destination, Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public static partial void DrawLineOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public static partial void DrawLineOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public static partial void DrawPixel(Color clr, Point2D pt);', 'function_to_bind': 'draw_pixel'}
{'function_definition': 'public static partial void DrawPixel(Color clr, Point2D pt, DrawingOptions opts);', 'function_to_bind': 'draw_pixel'}
{'function_definition': 'public static partial void DrawPixel(Color clr, double x, double y);', 'function_to_bind': 'draw_pixel'}
{'function_definition': 'public static partial void DrawPixel(Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_pixel'}
{'function_definition': 'public static partial void DrawPixelOnBitmap(Bitmap destination, Color clr, Point2D pt);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public static partial void DrawPixelOnBitmap(Bitmap destination, Color clr, Point2D pt, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public static partial void DrawPixelOnBitmap(Bitmap destination, Color clr, double x, double y);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public static partial void DrawPixelOnBitmap(Bitmap destination, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public static partial void DrawPixelOnWindow(Window destination, Color clr, Point2D pt);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public static partial void DrawPixelOnWindow(Window destination, Color clr, Point2D pt, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public static partial void DrawPixelOnWindow(Window destination, Color clr, double x, double y);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public static partial void DrawPixelOnWindow(Window destination, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public static partial Color GetPixel(Bitmap bmp, Point2D pt);', 'function_to_bind': 'get_pixel'}
{'function_definition': 'public static partial Color GetPixel(Bitmap bmp, double x, double y);', 'function_to_bind': 'get_pixel'}
{'function_definition': 'public static partial Color GetPixel(Point2D pt);', 'function_to_bind': 'get_pixel'}
{'function_definition': 'public static partial Color GetPixel(double x, double y);', 'function_to_bind': 'get_pixel'}
{'function_definition': 'public static partial Color GetPixel(Window wnd, Point2D pt);', 'function_to_bind': 'get_pixel'}
{'function_definition': 'public static partial Color GetPixel(Window wnd, double x, double y);', 'function_to_bind': 'get_pixel'}
{'function_definition': 'public static partial void DrawQuad(Color clr, Quad q);', 'function_to_bind': 'draw_quad'}
{'function_definition': 'public static partial void DrawQuad(Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'draw_quad'}
{'function_definition': 'public static partial void DrawQuadOnBitmap(Bitmap destination, Color clr, Quad q);', 'function_to_bind': 'draw_quad_on_bitmap'}
{'function_definition': 'public static partial void DrawQuadOnBitmap(Bitmap destination, Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'draw_quad_on_bitmap'}
{'function_definition': 'public static partial void DrawQuadOnWindow(Window destination, Color clr, Quad q);', 'function_to_bind': 'draw_quad_on_window'}
{'function_definition': 'public static partial void DrawQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'draw_quad_on_window'}
{'function_definition': 'public static partial void DrawRectangle(Color clr, Rectangle rect);', 'function_to_bind': 'draw_rectangle'}
{'function_definition': 'public static partial void DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle'}
{'function_definition': 'public static partial void DrawRectangle(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_rectangle'}
{'function_definition': 'public static partial void DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle'}
{'function_definition': 'public static partial void DrawRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public static partial void DrawRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public static partial void DrawRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public static partial void DrawRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public static partial void DrawRectangleOnWindow(Window destination, Color clr, Rectangle rect);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public static partial void DrawRectangleOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public static partial void DrawRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public static partial void DrawRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public static partial void FillQuad(Color clr, Quad q);', 'function_to_bind': 'fill_quad'}
{'function_definition': 'public static partial void FillQuad(Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'fill_quad'}
{'function_definition': 'public static partial void FillQuadOnBitmap(Bitmap destination, Color clr, Quad q);', 'function_to_bind': 'fill_quad_on_bitmap'}
{'function_definition': 'public static partial void FillQuadOnBitmap(Bitmap destination, Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'fill_quad_on_bitmap'}
{'function_definition': 'public static partial void FillQuadOnWindow(Window destination, Color clr, Quad q);', 'function_to_bind': 'fill_quad_on_window'}
{'function_definition': 'public static partial void FillQuadOnWindow(Window destination, Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'fill_quad_on_window'}
{'function_definition': 'public static partial void FillRectangle(Color clr, Rectangle rect);', 'function_to_bind': 'fill_rectangle'}
{'function_definition': 'public static partial void FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle'}
{'function_definition': 'public static partial void FillRectangle(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_rectangle'}
{'function_definition': 'public static partial void FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle'}
{'function_definition': 'public static partial void FillRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public static partial void FillRectangleOnBitmap(Bitmap destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public static partial void FillRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public static partial void FillRectangleOnBitmap(Bitmap destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public static partial void FillRectangleOnWindow(Window destination, Color clr, Rectangle rect);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public static partial void FillRectangleOnWindow(Window destination, Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public static partial void FillRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public static partial void FillRectangleOnWindow(Window destination, Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public static partial void DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text'}
{'function_definition': 'public static partial void DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text'}
{'function_definition': 'public static partial void DrawText(string text, Color clr, double x, double y);', 'function_to_bind': 'draw_text'}
{'function_definition': 'public static partial void DrawText(string text, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text'}
{'function_definition': 'public static partial void DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text'}
{'function_definition': 'public static partial void DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text'}
{'function_definition': 'public static partial void DrawTextOnBitmap(Bitmap bmp, string text, Color clr, string fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public static partial void DrawTextOnBitmap(Bitmap bmp, string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public static partial void DrawTextOnBitmap(Bitmap bmp, string text, Color clr, double x, double y);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public static partial void DrawTextOnBitmap(Bitmap bmp, string text, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public static partial void DrawTextOnBitmap(Bitmap bmp, string text, Color clr, Font fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public static partial void DrawTextOnBitmap(Bitmap bmp, string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public static partial void DrawTextOnWindow(Window wnd, string text, Color clr, string fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public static partial void DrawTextOnWindow(Window wnd, string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public static partial void DrawTextOnWindow(Window wnd, string text, Color clr, double x, double y);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public static partial void DrawTextOnWindow(Window wnd, string text, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public static partial void DrawTextOnWindow(Window wnd, string text, Color clr, Font fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public static partial void DrawTextOnWindow(Window wnd, string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public static partial bool FontHasSize(string name, int fontSize);', 'function_to_bind': 'font_has_size'}
{'function_definition': 'public static partial bool FontHasSize(Font fnt, int fontSize);', 'function_to_bind': 'font_has_size'}
{'function_definition': 'public static partial void FontLoadSize(string name, int fontSize);', 'function_to_bind': 'font_load_size'}
{'function_definition': 'public static partial void FontLoadSize(Font fnt, int fontSize);', 'function_to_bind': 'font_load_size'}
{'function_definition': 'public static partial Font FontNamed(string name);', 'function_to_bind': 'font_named'}
{'function_definition': 'public static partial void FreeAllFonts();', 'function_to_bind': 'free_all_fonts'}
{'function_definition': 'public static partial void FreeFont(Font fnt);', 'function_to_bind': 'free_font'}
{'function_definition': 'public static partial FontStyle GetFontStyle(string name);', 'function_to_bind': 'get_font_style'}
{'function_definition': 'public static partial FontStyle GetFontStyle(Font fnt);', 'function_to_bind': 'get_font_style'}
{'function_definition': 'public static partial Font GetSystemFont();', 'function_to_bind': 'get_system_font'}
{'function_definition': 'public static partial bool HasFont(Font fnt);', 'function_to_bind': 'has_font'}
{'function_definition': 'public static partial bool HasFont(string name);', 'function_to_bind': 'has_font'}
{'function_definition': 'public static partial Font LoadFont(string name, string filename);', 'function_to_bind': 'load_font'}
{'function_definition': 'public static partial void SetFontStyle(string name, FontStyle style);', 'function_to_bind': 'set_font_style'}
{'function_definition': 'public static partial void SetFontStyle(Font fnt, FontStyle style);', 'function_to_bind': 'set_font_style'}
{'function_definition': 'public static partial int TextHeight(string text, string fnt, int fontSize);', 'function_to_bind': 'text_height'}
{'function_definition': 'public static partial int TextHeight(string text, Font fnt, int fontSize);', 'function_to_bind': 'text_height'}
{'function_definition': 'public static partial int TextWidth(string text, string fnt, int fontSize);', 'function_to_bind': 'text_width'}
{'function_definition': 'public static partial int TextWidth(string text, Font fnt, int fontSize);', 'function_to_bind': 'text_width'}
{'function_definition': 'public static partial void DrawTriangle(Color clr, Triangle tri);', 'function_to_bind': 'draw_triangle'}
{'function_definition': 'public static partial void DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'draw_triangle'}
{'function_definition': 'public static partial void DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'draw_triangle'}
{'function_definition': 'public static partial void DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'draw_triangle'}
{'function_definition': 'public static partial void DrawTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public static partial void DrawTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public static partial void DrawTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public static partial void DrawTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public static partial void DrawTriangleOnWindow(Window destination, Color clr, Triangle tri);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public static partial void DrawTriangleOnWindow(Window destination, Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public static partial void DrawTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public static partial void DrawTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public static partial void FillTriangle(Color clr, Triangle tri);', 'function_to_bind': 'fill_triangle'}
{'function_definition': 'public static partial void FillTriangle(Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'fill_triangle'}
{'function_definition': 'public static partial void FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'fill_triangle'}
{'function_definition': 'public static partial void FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'fill_triangle'}
{'function_definition': 'public static partial void FillTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public static partial void FillTriangleOnBitmap(Bitmap destination, Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public static partial void FillTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public static partial void FillTriangleOnBitmap(Bitmap destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public static partial void FillTriangleOnWindow(Window destination, Color clr, Triangle tri);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public static partial void FillTriangleOnWindow(Window destination, Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public static partial void FillTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public static partial void FillTriangleOnWindow(Window destination, Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public static partial void ProcessEvents();', 'function_to_bind': 'process_events'}
{'function_definition': 'public static partial bool QuitRequested();', 'function_to_bind': 'quit_requested'}
{'function_definition': 'public static partial void ResetQuit();', 'function_to_bind': 'reset_quit'}
{'function_definition': 'public static partial bool AnyKeyPressed();', 'function_to_bind': 'any_key_pressed'}
{'function_definition': 'public static partial void DeregisterCallbackOnKeyDown(KeyCallback callback);', 'function_to_bind': 'deregister_callback_on_key_down'}
{'function_definition': 'public static partial void DeregisterCallbackOnKeyTyped(KeyCallback callback);', 'function_to_bind': 'deregister_callback_on_key_typed'}
{'function_definition': 'public static partial void DeregisterCallbackOnKeyUp(KeyCallback callback);', 'function_to_bind': 'deregister_callback_on_key_up'}
{'function_definition': 'public static partial bool KeyDown(KeyCode key);', 'function_to_bind': 'key_down'}
{'function_definition': 'public static partial string KeyName(KeyCode key);', 'function_to_bind': 'key_name'}
{'function_definition': 'public static partial bool KeyReleased(KeyCode key);', 'function_to_bind': 'key_released'}
{'function_definition': 'public static partial bool KeyTyped(KeyCode key);', 'function_to_bind': 'key_typed'}
{'function_definition': 'public static partial bool KeyUp(KeyCode key);', 'function_to_bind': 'key_up'}
{'function_definition': 'public static partial void RegisterCallbackOnKeyDown(KeyCallback callback);', 'function_to_bind': 'register_callback_on_key_down'}
{'function_definition': 'public static partial void RegisterCallbackOnKeyTyped(KeyCallback callback);', 'function_to_bind': 'register_callback_on_key_typed'}
{'function_definition': 'public static partial void RegisterCallbackOnKeyUp(KeyCallback callback);', 'function_to_bind': 'register_callback_on_key_up'}
{'function_definition': 'public static partial void HideMouse();', 'function_to_bind': 'hide_mouse'}
{'function_definition': 'public static partial bool MouseClicked(MouseButton button);', 'function_to_bind': 'mouse_clicked'}
{'function_definition': 'public static partial bool MouseDown(MouseButton button);', 'function_to_bind': 'mouse_down'}
{'function_definition': 'public static partial Vector2D MouseMovement();', 'function_to_bind': 'mouse_movement'}
{'function_definition': 'public static partial Point2D MousePosition();', 'function_to_bind': 'mouse_position'}
{'function_definition': 'public static partial Vector2D MousePositionVector();', 'function_to_bind': 'mouse_position_vector'}
{'function_definition': 'public static partial bool MouseShown();', 'function_to_bind': 'mouse_shown'}
{'function_definition': 'public static partial bool MouseUp(MouseButton button);', 'function_to_bind': 'mouse_up'}
{'function_definition': 'public static partial Vector2D MouseWheelScroll();', 'function_to_bind': 'mouse_wheel_scroll'}
{'function_definition': 'public static partial float MouseX();', 'function_to_bind': 'mouse_x'}
{'function_definition': 'public static partial float MouseY();', 'function_to_bind': 'mouse_y'}
{'function_definition': 'public static partial void MoveMouse(double x, double y);', 'function_to_bind': 'move_mouse'}
{'function_definition': 'public static partial void MoveMouse(Point2D point);', 'function_to_bind': 'move_mouse'}
{'function_definition': 'public static partial void ShowMouse();', 'function_to_bind': 'show_mouse'}
{'function_definition': 'public static partial void ShowMouse(bool show);', 'function_to_bind': 'show_mouse'}
{'function_definition': 'public static partial void DrawCollectedText(Color clr, Font fnt, int fontSize, DrawingOptions opts);', 'function_to_bind': 'draw_collected_text'}
{'function_definition': 'public static partial void EndReadingText();', 'function_to_bind': 'end_reading_text'}
{'function_definition': 'public static partial void EndReadingText(Window wind);', 'function_to_bind': 'end_reading_text'}
{'function_definition': 'public static partial bool ReadingText();', 'function_to_bind': 'reading_text'}
{'function_definition': 'public static partial bool ReadingText(Window wind);', 'function_to_bind': 'reading_text'}
{'function_definition': 'public static partial void StartReadingText(Rectangle rect);', 'function_to_bind': 'start_reading_text'}
{'function_definition': 'public static partial void StartReadingText(Rectangle rect, string initialText);', 'function_to_bind': 'start_reading_text'}
{'function_definition': 'public static partial void StartReadingText(Window wind, Rectangle rect);', 'function_to_bind': 'start_reading_text'}
{'function_definition': 'public static partial void StartReadingText(Window wind, Rectangle rect, string initialText);', 'function_to_bind': 'start_reading_text'}
{'function_definition': 'public static partial bool TextEntryCancelled();', 'function_to_bind': 'text_entry_cancelled'}
{'function_definition': 'public static partial bool TextEntryCancelled(Window wind);', 'function_to_bind': 'text_entry_cancelled'}
{'function_definition': 'public static partial string TextInput();', 'function_to_bind': 'text_input'}
{'function_definition': 'public static partial string TextInput(Window wind);', 'function_to_bind': 'text_input'}
{'function_definition': 'public static partial void AddColumn(int width);', 'function_to_bind': 'add_column'}
{'function_definition': 'public static partial void AddColumnRelative(double width);', 'function_to_bind': 'add_column_relative'}
{'function_definition': 'public static partial bool BitmapButton(Bitmap bmp);', 'function_to_bind': 'bitmap_button'}
{'function_definition': 'public static partial bool BitmapButton(Bitmap bmp, Rectangle rect);', 'function_to_bind': 'bitmap_button'}
{'function_definition': 'public static partial bool BitmapButton(Bitmap bmp, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'bitmap_button'}
{'function_definition': 'public static partial bool BitmapButton(Bitmap bmp, DrawingOptions opts);', 'function_to_bind': 'bitmap_button'}
{'function_definition': 'public static partial bool BitmapButton(string labelText, Bitmap bmp);', 'function_to_bind': 'bitmap_button'}
{'function_definition': 'public static partial bool BitmapButton(string labelText, Bitmap bmp, DrawingOptions opts);', 'function_to_bind': 'bitmap_button'}
{'function_definition': 'public static partial bool Button(string text, Rectangle rect);', 'function_to_bind': 'button'}
{'function_definition': 'public static partial bool Button(string text);', 'function_to_bind': 'button'}
{'function_definition': 'public static partial bool Button(string labelText, string text);', 'function_to_bind': 'button'}
{'function_definition': 'public static partial bool Checkbox(string text, bool value, Rectangle rect);', 'function_to_bind': 'checkbox'}
{'function_definition': 'public static partial bool Checkbox(string text, bool value);', 'function_to_bind': 'checkbox'}
{'function_definition': 'public static partial bool Checkbox(string labelText, string text, bool value);', 'function_to_bind': 'checkbox'}
{'function_definition': 'public static partial Color ColorSlider(Color clr, Rectangle rect);', 'function_to_bind': 'color_slider'}
{'function_definition': 'public static partial Color ColorSlider(Color clr);', 'function_to_bind': 'color_slider'}
{'function_definition': 'public static partial Color ColorSlider(string labelText, Color clr);', 'function_to_bind': 'color_slider'}
{'function_definition': 'public static partial void DisableInterface();', 'function_to_bind': 'disable_interface'}
{'function_definition': 'public static partial void DrawInterface();', 'function_to_bind': 'draw_interface'}
{'function_definition': 'public static partial void EnableInterface();', 'function_to_bind': 'enable_interface'}
{'function_definition': 'public static partial void EndInset(string name);', 'function_to_bind': 'end_inset'}
{'function_definition': 'public static partial void EndPanel(string name);', 'function_to_bind': 'end_panel'}
{'function_definition': 'public static partial void EndPopup(string name);', 'function_to_bind': 'end_popup'}
{'function_definition': 'public static partial void EndTreenode(string labelText);', 'function_to_bind': 'end_treenode'}
{'function_definition': 'public static partial void EnterColumn();', 'function_to_bind': 'enter_column'}
{'function_definition': 'public static partial int GetInterfaceLabelWidth();', 'function_to_bind': 'get_interface_label_width'}
{'function_definition': 'public static partial bool Header(string labelText);', 'function_to_bind': 'header'}
{'function_definition': 'public static partial Color HSBColorSlider(Color clr, Rectangle rect);', 'function_to_bind': 'hsb_color_slider'}
{'function_definition': 'public static partial Color HSBColorSlider(Color clr);', 'function_to_bind': 'hsb_color_slider'}
{'function_definition': 'public static partial Color HSBColorSlider(string labelText, Color clr);', 'function_to_bind': 'hsb_color_slider'}
{'function_definition': 'public static partial bool InterfaceEnabled();', 'function_to_bind': 'interface_enabled'}
{'function_definition': 'public static partial void InterfaceStylePanel(Rectangle initialRectangle);', 'function_to_bind': 'interface_style_panel'}
{'function_definition': 'public static partial void LabelElement(string text);', 'function_to_bind': 'label_element'}
{'function_definition': 'public static partial void LabelElement(string text, Rectangle rect);', 'function_to_bind': 'label_element'}
{'function_definition': 'public static partial bool LastElementChanged();', 'function_to_bind': 'last_element_changed'}
{'function_definition': 'public static partial bool LastElementConfirmed();', 'function_to_bind': 'last_element_confirmed'}
{'function_definition': 'public static partial void LeaveColumn();', 'function_to_bind': 'leave_column'}
{'function_definition': 'public static partial float NumberBox(float value, float step, Rectangle rect);', 'function_to_bind': 'number_box'}
{'function_definition': 'public static partial float NumberBox(float value, float step);', 'function_to_bind': 'number_box'}
{'function_definition': 'public static partial float NumberBox(string labelText, float value, float step);', 'function_to_bind': 'number_box'}
{'function_definition': 'public static partial void OpenPopup(string name);', 'function_to_bind': 'open_popup'}
{'function_definition': 'public static partial void Paragraph(string text);', 'function_to_bind': 'paragraph'}
{'function_definition': 'public static partial void Paragraph(string text, Rectangle rect);', 'function_to_bind': 'paragraph'}
{'function_definition': 'public static partial void ResetLayout();', 'function_to_bind': 'reset_layout'}
{'function_definition': 'public static partial void SetInterfaceAccentColor(Color clr, float contrast);', 'function_to_bind': 'set_interface_accent_color'}
{'function_definition': 'public static partial void SetInterfaceBorderColor(Color clr);', 'function_to_bind': 'set_interface_border_color'}
{'function_definition': 'public static partial void SetInterfaceColorsAuto(Color mainClr, Color accentClr, float contrast, float accentContrast, float borderContrast);', 'function_to_bind': 'set_interface_colors_auto'}
{'function_definition': 'public static partial void SetInterfaceElementColor(Color clr, float contrast);', 'function_to_bind': 'set_interface_element_color'}
{'function_definition': 'public static partial void SetInterfaceElementShadows(int radius, Color clr, Point2D offset);', 'function_to_bind': 'set_interface_element_shadows'}
{'function_definition': 'public static partial void SetInterfaceFont(string fnt);', 'function_to_bind': 'set_interface_font'}
{'function_definition': 'public static partial void SetInterfaceFont(Font fnt);', 'function_to_bind': 'set_interface_font'}
{'function_definition': 'public static partial void SetInterfaceFontSize(int size);', 'function_to_bind': 'set_interface_font_size'}
{'function_definition': 'public static partial void SetInterfaceLabelWidth(int width);', 'function_to_bind': 'set_interface_label_width'}
{'function_definition': 'public static partial void SetInterfacePanelShadows(int radius, Color clr, Point2D offset);', 'function_to_bind': 'set_interface_panel_shadows'}
{'function_definition': 'public static partial void SetInterfaceRootTextColor(Color clr);', 'function_to_bind': 'set_interface_root_text_color'}
{'function_definition': 'public static partial void SetInterfaceShadows(int radius, Color clr, Point2D offset);', 'function_to_bind': 'set_interface_shadows'}
{'function_definition': 'public static partial void SetInterfaceSpacing(int spacing, int padding);', 'function_to_bind': 'set_interface_spacing'}
{'function_definition': 'public static partial void SetInterfaceStyle(InterfaceStyle style);', 'function_to_bind': 'set_interface_style'}
{'function_definition': 'public static partial void SetInterfaceStyle(InterfaceStyle style, Color clr);', 'function_to_bind': 'set_interface_style'}
{'function_definition': 'public static partial void SetInterfaceTextColor(Color clr);', 'function_to_bind': 'set_interface_text_color'}
{'function_definition': 'public static partial void SetLayoutHeight(int height);', 'function_to_bind': 'set_layout_height'}
{'function_definition': 'public static partial void SingleLineLayout();', 'function_to_bind': 'single_line_layout'}
{'function_definition': 'public static partial float Slider(float value, float minValue, float maxValue, Rectangle rect);', 'function_to_bind': 'slider'}
{'function_definition': 'public static partial float Slider(float value, float minValue, float maxValue);', 'function_to_bind': 'slider'}
{'function_definition': 'public static partial float Slider(string labelText, float value, float minValue, float maxValue);', 'function_to_bind': 'slider'}
{'function_definition': 'public static partial void SplitIntoColumns(int count);', 'function_to_bind': 'split_into_columns'}
{'function_definition': 'public static partial void SplitIntoColumns(int count, int lastWidth);', 'function_to_bind': 'split_into_columns'}
{'function_definition': 'public static partial void SplitIntoColumnsRelative(int count, double lastWidth);', 'function_to_bind': 'split_into_columns_relative'}
{'function_definition': 'public static partial void StartCustomLayout();', 'function_to_bind': 'start_custom_layout'}
{'function_definition': 'public static partial void StartInset(string name, Rectangle rect);', 'function_to_bind': 'start_inset'}
{'function_definition': 'public static partial void StartInset(string name, int height);', 'function_to_bind': 'start_inset'}
{'function_definition': 'public static partial bool StartPanel(string name, Rectangle initialRectangle);', 'function_to_bind': 'start_panel'}
{'function_definition': 'public static partial bool StartPopup(string name);', 'function_to_bind': 'start_popup'}
{'function_definition': 'public static partial bool StartTreenode(string labelText);', 'function_to_bind': 'start_treenode'}
{'function_definition': 'public static partial string TextBox(string labelText, string value, Rectangle rect);', 'function_to_bind': 'text_box'}
{'function_definition': 'public static partial string TextBox(string labelText, string value);', 'function_to_bind': 'text_box'}
{'function_definition': 'public static partial string TextBox(string labelText, string value, bool showLabel);', 'function_to_bind': 'text_box'}
{'function_definition': 'public static partial Json CreateJson();', 'function_to_bind': 'create_json'}
{'function_definition': 'public static partial Json CreateJson(string jsonString);', 'function_to_bind': 'create_json'}
{'function_definition': 'public static partial void FreeAllJson();', 'function_to_bind': 'free_all_json'}
{'function_definition': 'public static partial void FreeJson(Json j);', 'function_to_bind': 'free_json'}
{'function_definition': 'public static partial int JsonCountKeys(Json j);', 'function_to_bind': 'json_count_keys'}
{'function_definition': 'public static partial Json JsonFromColor(Color clr);', 'function_to_bind': 'json_from_color'}
{'function_definition': 'public static partial Json JsonFromFile(string filename);', 'function_to_bind': 'json_from_file'}
{'function_definition': 'public static partial Json JsonFromString(string jString);', 'function_to_bind': 'json_from_string'}
{'function_definition': 'public static partial bool JsonHasKey(Json j, string key);', 'function_to_bind': 'json_has_key'}
{'function_definition': 'public static partial void JsonReadArray(Json j, string key, ref List<double> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public static partial void JsonReadArray(Json j, string key, ref List<Json> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public static partial void JsonReadArray(Json j, string key, ref List<string> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public static partial void JsonReadArray(Json j, string key, ref List<bool> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public static partial bool JsonReadBool(Json j, string key);', 'function_to_bind': 'json_read_bool'}
{'function_definition': 'public static partial float JsonReadNumber(Json j, string key);', 'function_to_bind': 'json_read_number'}
{'function_definition': 'public static partial double JsonReadNumberAsDouble(Json j, string key);', 'function_to_bind': 'json_read_number_as_double'}
{'function_definition': 'public static partial int JsonReadNumberAsInt(Json j, string key);', 'function_to_bind': 'json_read_number_as_int'}
{'function_definition': 'public static partial Json JsonReadObject(Json j, string key);', 'function_to_bind': 'json_read_object'}
{'function_definition': 'public static partial string JsonReadString(Json j, string key);', 'function_to_bind': 'json_read_string'}
{'function_definition': 'public static partial void JsonSetArray(Json j, string key, List<string> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public static partial void JsonSetArray(Json j, string key, List<double> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public static partial void JsonSetArray(Json j, string key, List<bool> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public static partial void JsonSetArray(Json j, string key, List<Json> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public static partial void JsonSetBool(Json j, string key, bool value);', 'function_to_bind': 'json_set_bool'}
{'function_definition': 'public static partial void JsonSetNumber(Json j, string key, int value);', 'function_to_bind': 'json_set_number'}
{'function_definition': 'public static partial void JsonSetNumber(Json j, string key, double value);', 'function_to_bind': 'json_set_number'}
{'function_definition': 'public static partial void JsonSetNumber(Json j, string key, float value);', 'function_to_bind': 'json_set_number'}
{'function_definition': 'public static partial void JsonSetObject(Json j, string key, Json obj);', 'function_to_bind': 'json_set_object'}
{'function_definition': 'public static partial void JsonSetString(Json j, string key, string value);', 'function_to_bind': 'json_set_string'}
{'function_definition': 'public static partial Color JsonToColor(Json j);', 'function_to_bind': 'json_to_color'}
{'function_definition': 'public static partial void JsonToFile(Json j, string filename);', 'function_to_bind': 'json_to_file'}
{'function_definition': 'public static partial string JsonToString(Json j);', 'function_to_bind': 'json_to_string'}
{'function_definition': 'public static partial void CloseLogProcess();', 'function_to_bind': 'close_log_process'}
{'function_definition': 'public static partial void InitCustomLogger(LogMode mode);', 'function_to_bind': 'init_custom_logger'}
{'function_definition': 'public static partial void InitCustomLogger(string appName, bool overridePrevLog, LogMode mode);', 'function_to_bind': 'init_custom_logger'}
{'function_definition': 'public static partial void Log(LogLevel level, string message);', 'function_to_bind': 'log'}
{'function_definition': 'public static partial bool AcceptAllNewConnections();', 'function_to_bind': 'accept_all_new_connections'}
{'function_definition': 'public static partial bool AcceptNewConnection(ServerSocket server);', 'function_to_bind': 'accept_new_connection'}
{'function_definition': 'public static partial void BroadcastMessage(string aMsg, ServerSocket svr);', 'function_to_bind': 'broadcast_message'}
{'function_definition': 'public static partial void BroadcastMessage(string aMsg);', 'function_to_bind': 'broadcast_message'}
{'function_definition': 'public static partial void BroadcastMessage(string aMsg, string name);', 'function_to_bind': 'broadcast_message'}
{'function_definition': 'public static partial void CheckNetworkActivity();', 'function_to_bind': 'check_network_activity'}
{'function_definition': 'public static partial void ClearMessages(string name);', 'function_to_bind': 'clear_messages'}
{'function_definition': 'public static partial void ClearMessages(Connection aConnection);', 'function_to_bind': 'clear_messages'}
{'function_definition': 'public static partial void ClearMessages(ServerSocket svr);', 'function_to_bind': 'clear_messages'}
{'function_definition': 'public static partial void CloseAllConnections();', 'function_to_bind': 'close_all_connections'}
{'function_definition': 'public static partial void CloseAllServers();', 'function_to_bind': 'close_all_servers'}
{'function_definition': 'public static partial bool CloseConnection(Connection aConnection);', 'function_to_bind': 'close_connection'}
{'function_definition': 'public static partial bool CloseConnection(string name);', 'function_to_bind': 'close_connection'}
{'function_definition': 'public static partial void CloseMessage(Message msg);', 'function_to_bind': 'close_message'}
{'function_definition': 'public static partial bool CloseServer(string name);', 'function_to_bind': 'close_server'}
{'function_definition': 'public static partial bool CloseServer(ServerSocket svr);', 'function_to_bind': 'close_server'}
{'function_definition': 'public static partial uint ConnectionCount(string name);', 'function_to_bind': 'connection_count'}
{'function_definition': 'public static partial uint ConnectionCount(ServerSocket server);', 'function_to_bind': 'connection_count'}
{'function_definition': 'public static partial uint ConnectionIP(Connection aConnection);', 'function_to_bind': 'connection_ip'}
{'function_definition': 'public static partial uint ConnectionIP(string name);', 'function_to_bind': 'connection_ip'}
{'function_definition': 'public static partial Connection ConnectionNamed(string name);', 'function_to_bind': 'connection_named'}
{'function_definition': 'public static partial ushort ConnectionPort(Connection aConnection);', 'function_to_bind': 'connection_port'}
{'function_definition': 'public static partial ushort ConnectionPort(string name);', 'function_to_bind': 'connection_port'}
{'function_definition': 'public static partial ServerSocket CreateServer(string name, ushort port);', 'function_to_bind': 'create_server'}
{'function_definition': 'public static partial ServerSocket CreateServer(string name, ushort port, ConnectionType protocol);', 'function_to_bind': 'create_server'}
{'function_definition': 'public static partial string DecToHex(uint aDec);', 'function_to_bind': 'dec_to_hex'}
{'function_definition': 'public static partial string DecToIpv4(uint ip);', 'function_to_bind': 'dec_to_ipv4'}
{'function_definition': 'public static partial Connection FetchNewConnection(ServerSocket server);', 'function_to_bind': 'fetch_new_connection'}
{'function_definition': 'public static partial bool HasConnection(string name);', 'function_to_bind': 'has_connection'}
{'function_definition': 'public static partial bool HasMessages();', 'function_to_bind': 'has_messages'}
{'function_definition': 'public static partial bool HasMessages(Connection con);', 'function_to_bind': 'has_messages'}
{'function_definition': 'public static partial bool HasMessages(string name);', 'function_to_bind': 'has_messages'}
{'function_definition': 'public static partial bool HasMessages(ServerSocket svr);', 'function_to_bind': 'has_messages'}
{'function_definition': 'public static partial bool HasNewConnections();', 'function_to_bind': 'has_new_connections'}
{'function_definition': 'public static partial bool HasServer(string name);', 'function_to_bind': 'has_server'}
{'function_definition': 'public static partial string HexStrToIpv4(string aHex);', 'function_to_bind': 'hex_str_to_ipv4'}
{'function_definition': 'public static partial string HexToDecString(string aHex);', 'function_to_bind': 'hex_to_dec_string'}
{'function_definition': 'public static partial string HexToMac(string hexStr);', 'function_to_bind': 'hex_to_mac'}
{'function_definition': 'public static partial uint Ipv4ToDec(string aIP);', 'function_to_bind': 'ipv4_to_dec'}
{'function_definition': 'public static partial string Ipv4ToHex(string aIP);', 'function_to_bind': 'ipv4_to_hex'}
{'function_definition': 'public static partial bool IsConnectionOpen(Connection con);', 'function_to_bind': 'is_connection_open'}
{'function_definition': 'public static partial bool IsConnectionOpen(string name);', 'function_to_bind': 'is_connection_open'}
{'function_definition': 'public static partial bool IsValidIpv4(string ip);', 'function_to_bind': 'is_valid_ipv4'}
{'function_definition': 'public static partial bool IsValidMac(string macAddress);', 'function_to_bind': 'is_valid_mac'}
{'function_definition': 'public static partial Connection LastConnection(string name);', 'function_to_bind': 'last_connection'}
{'function_definition': 'public static partial Connection LastConnection(ServerSocket server);', 'function_to_bind': 'last_connection'}
{'function_definition': 'public static partial string MacToHex(string macAddress);', 'function_to_bind': 'mac_to_hex'}
{'function_definition': 'public static partial Connection MessageConnection(Message msg);', 'function_to_bind': 'message_connection'}
{'function_definition': 'public static partial uint MessageCount(ServerSocket svr);', 'function_to_bind': 'message_count'}
{'function_definition': 'public static partial uint MessageCount(Connection aConnection);', 'function_to_bind': 'message_count'}
{'function_definition': 'public static partial uint MessageCount(string name);', 'function_to_bind': 'message_count'}
{'function_definition': 'public static partial string MessageData(Message msg);', 'function_to_bind': 'message_data'}
{'function_definition': 'public static partial List<byte> MessageDataBytes(Message msg);', 'function_to_bind': 'message_data_bytes'}
{'function_definition': 'public static partial string MessageHost(Message msg);', 'function_to_bind': 'message_host'}
{'function_definition': 'public static partial ushort MessagePort(Message msg);', 'function_to_bind': 'message_port'}
{'function_definition': 'public static partial ConnectionType MessageProtocol(Message msg);', 'function_to_bind': 'message_protocol'}
{'function_definition': 'public static partial string MyIP();', 'function_to_bind': 'my_ip'}
{'function_definition': 'public static partial string NameForConnection(string host, uint port);', 'function_to_bind': 'name_for_connection'}
{'function_definition': 'public static partial int NewConnectionCount(ServerSocket server);', 'function_to_bind': 'new_connection_count'}
{'function_definition': 'public static partial Connection OpenConnection(string name, string host, ushort port);', 'function_to_bind': 'open_connection'}
{'function_definition': 'public static partial Connection OpenConnection(string name, string host, ushort port, ConnectionType protocol);', 'function_to_bind': 'open_connection'}
{'function_definition': 'public static partial Message ReadMessage();', 'function_to_bind': 'read_message'}
{'function_definition': 'public static partial Message ReadMessage(Connection aConnection);', 'function_to_bind': 'read_message'}
{'function_definition': 'public static partial Message ReadMessage(string name);', 'function_to_bind': 'read_message'}
{'function_definition': 'public static partial Message ReadMessage(ServerSocket svr);', 'function_to_bind': 'read_message'}
{'function_definition': 'public static partial string ReadMessageData(string name);', 'function_to_bind': 'read_message_data'}
{'function_definition': 'public static partial string ReadMessageData(Connection aConnection);', 'function_to_bind': 'read_message_data'}
{'function_definition': 'public static partial string ReadMessageData(ServerSocket svr);', 'function_to_bind': 'read_message_data'}
{'function_definition': 'public static partial void Reconnect(Connection aConnection);', 'function_to_bind': 'reconnect'}
{'function_definition': 'public static partial void Reconnect(string name);', 'function_to_bind': 'reconnect'}
{'function_definition': 'public static partial void ReleaseAllConnections();', 'function_to_bind': 'release_all_connections'}
{'function_definition': 'public static partial void ResetNewConnectionCount(ServerSocket server);', 'function_to_bind': 'reset_new_connection_count'}
{'function_definition': 'public static partial Connection RetrieveConnection(string name, int idx);', 'function_to_bind': 'retrieve_connection'}
{'function_definition': 'public static partial Connection RetrieveConnection(ServerSocket server, int idx);', 'function_to_bind': 'retrieve_connection'}
{'function_definition': 'public static partial bool SendMessageTo(string aMsg, Connection aConnection);', 'function_to_bind': 'send_message_to'}
{'function_definition': 'public static partial bool SendMessageTo(string aMsg, string name);', 'function_to_bind': 'send_message_to'}
{'function_definition': 'public static partial bool ServerHasNewConnection(string name);', 'function_to_bind': 'server_has_new_connection'}
{'function_definition': 'public static partial bool ServerHasNewConnection(ServerSocket server);', 'function_to_bind': 'server_has_new_connection'}
{'function_definition': 'public static partial ServerSocket ServerNamed(string name);', 'function_to_bind': 'server_named'}
{'function_definition': 'public static partial void SetUDPPacketSize(uint udpPacketSize);', 'function_to_bind': 'set_udp_packet_size'}
{'function_definition': 'public static partial uint UDPPacketSize();', 'function_to_bind': 'udp_packet_size'}
{'function_definition': 'public static partial Bitmap DownloadBitmap(string name, string url, ushort port);', 'function_to_bind': 'download_bitmap'}
{'function_definition': 'public static partial Font DownloadFont(string name, string url, ushort port);', 'function_to_bind': 'download_font'}
{'function_definition': 'public static partial Music DownloadMusic(string name, string url, ushort port);', 'function_to_bind': 'download_music'}
{'function_definition': 'public static partial SoundEffect DownloadSoundEffect(string name, string url, ushort port);', 'function_to_bind': 'download_sound_effect'}
{'function_definition': 'public static partial void FreeResponse(HttpResponse response);', 'function_to_bind': 'free_response'}
{'function_definition': 'public static partial HttpResponse HttpGet(string url, ushort port);', 'function_to_bind': 'http_get'}
{'function_definition': 'public static partial HttpResponse HttpPost(string url, ushort port, string body, List<string> headers);', 'function_to_bind': 'http_post'}
{'function_definition': 'public static partial HttpResponse HttpPost(string url, ushort port, string body);', 'function_to_bind': 'http_post'}
{'function_definition': 'public static partial string HttpResponseToString(HttpResponse response);', 'function_to_bind': 'http_response_to_string'}
{'function_definition': 'public static partial void SaveResponseToFile(HttpResponse response, string path);', 'function_to_bind': 'save_response_to_file'}
{'function_definition': 'public static partial bool HasIncomingRequests(WebServer server);', 'function_to_bind': 'has_incoming_requests'}
{'function_definition': 'public static partial bool IsDeleteRequestFor(HttpRequest request, string path);', 'function_to_bind': 'is_delete_request_for'}
{'function_definition': 'public static partial bool IsGetRequestFor(HttpRequest request, string path);', 'function_to_bind': 'is_get_request_for'}
{'function_definition': 'public static partial bool IsOptionsRequestFor(HttpRequest request, string path);', 'function_to_bind': 'is_options_request_for'}
{'function_definition': 'public static partial bool IsPostRequestFor(HttpRequest request, string path);', 'function_to_bind': 'is_post_request_for'}
{'function_definition': 'public static partial bool IsPutRequestFor(HttpRequest request, string path);', 'function_to_bind': 'is_put_request_for'}
{'function_definition': 'public static partial bool IsRequestFor(HttpRequest request, HttpMethod method, string path);', 'function_to_bind': 'is_request_for'}
{'function_definition': 'public static partial bool IsTraceRequestFor(HttpRequest request, string path);', 'function_to_bind': 'is_trace_request_for'}
{'function_definition': 'public static partial HttpRequest NextWebRequest(WebServer server);', 'function_to_bind': 'next_web_request'}
{'function_definition': 'public static partial string RequestBody(HttpRequest r);', 'function_to_bind': 'request_body'}
{'function_definition': 'public static partial bool RequestHasQueryParameter(HttpRequest r, string name);', 'function_to_bind': 'request_has_query_parameter'}
{'function_definition': 'public static partial List<string> RequestHeaders(HttpRequest r);', 'function_to_bind': 'request_headers'}
{'function_definition': 'public static partial HttpMethod RequestMethod(HttpRequest r);', 'function_to_bind': 'request_method'}
{'function_definition': 'public static partial string RequestQueryParameter(HttpRequest r, string name, string defaultValue);', 'function_to_bind': 'request_query_parameter'}
{'function_definition': 'public static partial string RequestQueryString(HttpRequest r);', 'function_to_bind': 'request_query_string'}
{'function_definition': 'public static partial string RequestURI(HttpRequest r);', 'function_to_bind': 'request_uri'}
{'function_definition': 'public static partial List<string> RequestURIStubs(HttpRequest r);', 'function_to_bind': 'request_uri_stubs'}
{'function_definition': 'public static partial void SendCSSFileResponse(HttpRequest r, string filename);', 'function_to_bind': 'send_css_file_response'}
{'function_definition': 'public static partial void SendFileResponse(HttpRequest r, string filename, string contentType);', 'function_to_bind': 'send_file_response'}
{'function_definition': 'public static partial void SendHtmlFileResponse(HttpRequest r, string filename);', 'function_to_bind': 'send_html_file_response'}
{'function_definition': 'public static partial void SendJavascriptFileResponse(HttpRequest r, string filename);', 'function_to_bind': 'send_javascript_file_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r, string message);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r, HttpStatusCode code);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r, HttpStatusCode code, string message);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r, HttpStatusCode code, string message, string contentType);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r, HttpStatusCode code, string message, string contentType, List<string> headers);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial void SendResponse(HttpRequest r, Json j);', 'function_to_bind': 'send_response'}
{'function_definition': 'public static partial List<string> SplitURIStubs(string uri);', 'function_to_bind': 'split_uri_stubs'}
{'function_definition': 'public static partial WebServer StartWebServer();', 'function_to_bind': 'start_web_server'}
{'function_definition': 'public static partial WebServer StartWebServer(ushort port);', 'function_to_bind': 'start_web_server'}
{'function_definition': 'public static partial void StopWebServer(WebServer server);', 'function_to_bind': 'stop_web_server'}
{'function_definition': 'public static partial bool BitmapCircleCollision(Bitmap bmp, Point2D pt, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public static partial bool BitmapCircleCollision(Bitmap bmp, double x, double y, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public static partial bool BitmapCircleCollision(Bitmap bmp, int cell, Matrix2D translation, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public static partial bool BitmapCircleCollision(Bitmap bmp, int cell, Point2D pt, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public static partial bool BitmapCircleCollision(Bitmap bmp, int cell, double x, double y, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public static partial bool BitmapCollision(Bitmap bmp1, double x1, double y1, Bitmap bmp2, double x2, double y2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public static partial bool BitmapCollision(Bitmap bmp1, Point2D pt1, Bitmap bmp2, Point2D pt2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public static partial bool BitmapCollision(Bitmap bmp1, int cell1, Matrix2D matrix1, Bitmap bmp2, int cell2, Matrix2D matrix2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public static partial bool BitmapCollision(Bitmap bmp1, int cell1, Point2D pt1, Bitmap bmp2, int cell2, Point2D pt2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public static partial bool BitmapCollision(Bitmap bmp1, int cell1, double x1, double y1, Bitmap bmp2, int cell2, double x2, double y2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public static partial bool BitmapPointCollision(Bitmap bmp, Matrix2D translation, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public static partial bool BitmapPointCollision(Bitmap bmp, Point2D bmpPt, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public static partial bool BitmapPointCollision(Bitmap bmp, double bmpX, double bmpY, double x, double y);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public static partial bool BitmapPointCollision(Bitmap bmp, int cell, Matrix2D translation, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public static partial bool BitmapPointCollision(Bitmap bmp, int cell, Point2D bmpPt, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public static partial bool BitmapPointCollision(Bitmap bmp, int cell, double bmpX, double bmpY, double x, double y);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public static partial bool BitmapQuadCollision(Bitmap bmp, Point2D pt, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public static partial bool BitmapQuadCollision(Bitmap bmp, double x, double y, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public static partial bool BitmapQuadCollision(Bitmap bmp, int cell, Matrix2D translation, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public static partial bool BitmapQuadCollision(Bitmap bmp, int cell, Point2D pt, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public static partial bool BitmapQuadCollision(Bitmap bmp, int cell, double x, double y, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public static partial bool BitmapRayCollision(Bitmap bmp, Point2D pt, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public static partial bool BitmapRayCollision(Bitmap bmp, double x, double y, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public static partial bool BitmapRayCollision(Bitmap bmp, int cell, Matrix2D translation, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public static partial bool BitmapRayCollision(Bitmap bmp, int cell, Point2D pt, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public static partial bool BitmapRayCollision(Bitmap bmp, int cell, double x, double y, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public static partial bool BitmapRectangleCollision(Bitmap bmp, Point2D pt, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public static partial bool BitmapRectangleCollision(Bitmap bmp, double x, double y, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public static partial bool BitmapRectangleCollision(Bitmap bmp, int cell, Matrix2D translation, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public static partial bool BitmapRectangleCollision(Bitmap bmp, int cell, Point2D pt, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public static partial bool BitmapRectangleCollision(Bitmap bmp, int cell, double x, double y, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public static partial bool BitmapTriangleCollision(Bitmap bmp, Point2D pt, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public static partial bool BitmapTriangleCollision(Bitmap bmp, double x, double y, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public static partial bool BitmapTriangleCollision(Bitmap bmp, int cell, Matrix2D translation, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public static partial bool BitmapTriangleCollision(Bitmap bmp, int cell, Point2D pt, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public static partial bool BitmapTriangleCollision(Bitmap bmp, int cell, double x, double y, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Quad collider, Quad collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Circle collider, Circle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Circle collider, Quad collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Circle collider, Rectangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Circle collider, Sprite collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Circle collider, Triangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Quad collider, Circle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Quad collider, Rectangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Quad collider, Sprite collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Quad collider, Triangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Rectangle collider, Circle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Rectangle collider, Quad collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Rectangle collider, Rectangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Rectangle collider, Sprite collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Rectangle collider, Triangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Sprite collider, Circle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Sprite collider, Quad collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Sprite collider, Rectangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Sprite collider, Sprite collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Sprite collider, Triangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Triangle collider, Circle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Triangle collider, Quad collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Triangle collider, Rectangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Triangle collider, Sprite collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial Vector2D CalculateCollisionDirection(Triangle collider, Triangle collidee);', 'function_to_bind': 'calculate_collision_direction'}
{'function_definition': 'public static partial bool ResolveCollision(ref Quad collider, Quad collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Circle collider, Circle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Circle collider, Quad collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Circle collider, Rectangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Circle collider, Sprite collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Circle collider, Triangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Quad collider, Circle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Quad collider, Rectangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Quad collider, Sprite collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Quad collider, Triangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Rectangle collider, Circle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Rectangle collider, Quad collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Rectangle collider, Rectangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Rectangle collider, Sprite collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Rectangle collider, Triangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(Sprite collider, Circle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(Sprite collider, Quad collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(Sprite collider, Rectangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(Sprite collider, Sprite collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(Sprite collider, Triangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Triangle collider, Circle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Triangle collider, Quad collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Triangle collider, Rectangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Triangle collider, Sprite collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool ResolveCollision(ref Triangle collider, Triangle collidee, Vector2D direction);', 'function_to_bind': 'resolve_collision'}
{'function_definition': 'public static partial bool SpriteBitmapCollision(Sprite s, Bitmap bmp, double x, double y);', 'function_to_bind': 'sprite_bitmap_collision'}
{'function_definition': 'public static partial bool SpriteBitmapCollision(Sprite s, Bitmap bmp, int cell, Point2D pt);', 'function_to_bind': 'sprite_bitmap_collision'}
{'function_definition': 'public static partial bool SpriteBitmapCollision(Sprite s, Bitmap bmp, int cell, double x, double y);', 'function_to_bind': 'sprite_bitmap_collision'}
{'function_definition': 'public static partial bool SpriteCircleCollision(Sprite s, Circle c);', 'function_to_bind': 'sprite_circle_collision'}
{'function_definition': 'public static partial bool SpriteCollision(Sprite s1, Sprite s2);', 'function_to_bind': 'sprite_collision'}
{'function_definition': 'public static partial bool SpritePointCollision(Sprite s, Point2D pt);', 'function_to_bind': 'sprite_point_collision'}
{'function_definition': 'public static partial bool SpriteQuadCollision(Sprite s, Quad q);', 'function_to_bind': 'sprite_quad_collision'}
{'function_definition': 'public static partial bool SpriteRayCollision(Sprite s, Point2D origin, Vector2D heading);', 'function_to_bind': 'sprite_ray_collision'}
{'function_definition': 'public static partial bool SpriteRectangleCollision(Sprite s, Rectangle rect);', 'function_to_bind': 'sprite_rectangle_collision'}
{'function_definition': 'public static partial bool SpriteTriangleCollision(Sprite s, Triangle t);', 'function_to_bind': 'sprite_triangle_collision'}
{'function_definition': 'public static partial void ApplyMatrix(Matrix2D matrix, ref Quad q);', 'function_to_bind': 'apply_matrix'}
{'function_definition': 'public static partial void ApplyMatrix(Matrix2D m, ref Triangle tri);', 'function_to_bind': 'apply_matrix'}
{'function_definition': 'public static partial Matrix2D IdentityMatrix();', 'function_to_bind': 'identity_matrix'}
{'function_definition': 'public static partial Matrix2D MatrixInverse(Matrix2D m);', 'function_to_bind': 'matrix_inverse'}
{'function_definition': 'public static partial Point2D MatrixMultiply(Matrix2D m, Point2D pt);', 'function_to_bind': 'matrix_multiply'}
{'function_definition': 'public static partial Matrix2D MatrixMultiply(Matrix2D m1, Matrix2D m2);', 'function_to_bind': 'matrix_multiply'}
{'function_definition': 'public static partial Vector2D MatrixMultiply(Matrix2D m, Vector2D v);', 'function_to_bind': 'matrix_multiply'}
{'function_definition': 'public static partial string MatrixToString(Matrix2D matrix);', 'function_to_bind': 'matrix_to_string'}
{'function_definition': 'public static partial Matrix2D RotationMatrix(double deg);', 'function_to_bind': 'rotation_matrix'}
{'function_definition': 'public static partial Matrix2D ScaleMatrix(Point2D scale);', 'function_to_bind': 'scale_matrix'}
{'function_definition': 'public static partial Matrix2D ScaleMatrix(Vector2D scale);', 'function_to_bind': 'scale_matrix'}
{'function_definition': 'public static partial Matrix2D ScaleMatrix(double scale);', 'function_to_bind': 'scale_matrix'}
{'function_definition': 'public static partial Matrix2D ScaleRotateTranslateMatrix(Point2D scale, double deg, Point2D translate);', 'function_to_bind': 'scale_rotate_translate_matrix'}
{'function_definition': 'public static partial Matrix2D TranslationMatrix(Point2D pt);', 'function_to_bind': 'translation_matrix'}
{'function_definition': 'public static partial Matrix2D TranslationMatrix(Vector2D pt);', 'function_to_bind': 'translation_matrix'}
{'function_definition': 'public static partial Matrix2D TranslationMatrix(double dx, double dy);', 'function_to_bind': 'translation_matrix'}
{'function_definition': 'public static partial double AngleBetween(Vector2D v1, Vector2D v2);', 'function_to_bind': 'angle_between'}
{'function_definition': 'public static partial double DotProduct(Vector2D v1, Vector2D v2);', 'function_to_bind': 'dot_product'}
{'function_definition': 'public static partial bool IsZeroVector(Vector2D v);', 'function_to_bind': 'is_zero_vector'}
{'function_definition': 'public static partial bool RayIntersectionPoint(Point2D fromPt, Vector2D heading, Line l, ref Point2D pt);', 'function_to_bind': 'ray_intersection_point'}
{'function_definition': 'public static partial Vector2D UnitVector(Vector2D v);', 'function_to_bind': 'unit_vector'}
{'function_definition': 'public static partial Vector2D VectorAdd(Vector2D v1, Vector2D v2);', 'function_to_bind': 'vector_add'}
{'function_definition': 'public static partial double VectorAngle(Vector2D v);', 'function_to_bind': 'vector_angle'}
{'function_definition': 'public static partial Vector2D VectorFromAngle(double angle, double magnitude);', 'function_to_bind': 'vector_from_angle'}
{'function_definition': 'public static partial Vector2D VectorFromLine(Line l);', 'function_to_bind': 'vector_from_line'}
{'function_definition': 'public static partial Vector2D VectorFromPointToRect(Point2D pt, Rectangle rect);', 'function_to_bind': 'vector_from_point_to_rect'}
{'function_definition': 'public static partial bool VectorInRect(Vector2D v, Rectangle rect);', 'function_to_bind': 'vector_in_rect'}
{'function_definition': 'public static partial Vector2D VectorInvert(Vector2D v);', 'function_to_bind': 'vector_invert'}
{'function_definition': 'public static partial Vector2D VectorLimit(Vector2D v, double limit);', 'function_to_bind': 'vector_limit'}
{'function_definition': 'public static partial double VectorMagnitude(Vector2D v);', 'function_to_bind': 'vector_magnitude'}
{'function_definition': 'public static partial double VectorMagnitudeSquared(Vector2D v);', 'function_to_bind': 'vector_magnitude_squared'}
{'function_definition': 'public static partial Vector2D VectorMultiply(Vector2D v1, double s);', 'function_to_bind': 'vector_multiply'}
{'function_definition': 'public static partial Vector2D VectorNormal(Vector2D v);', 'function_to_bind': 'vector_normal'}
{'function_definition': 'public static partial Vector2D VectorOutOfCircleFromCircle(Circle src, Circle bounds, Vector2D velocity);', 'function_to_bind': 'vector_out_of_circle_from_circle'}
{'function_definition': 'public static partial Vector2D VectorOutOfCircleFromPoint(Point2D pt, Circle c, Vector2D velocity);', 'function_to_bind': 'vector_out_of_circle_from_point'}
{'function_definition': 'public static partial Vector2D VectorOutOfRectFromCircle(Circle c, Rectangle rect, Vector2D velocity);', 'function_to_bind': 'vector_out_of_rect_from_circle'}
{'function_definition': 'public static partial Vector2D VectorOutOfRectFromPoint(Point2D pt, Rectangle rect, Vector2D velocity);', 'function_to_bind': 'vector_out_of_rect_from_point'}
{'function_definition': 'public static partial Vector2D VectorOutOfRectFromRect(Rectangle src, Rectangle bounds, Vector2D velocity);', 'function_to_bind': 'vector_out_of_rect_from_rect'}
{'function_definition': 'public static partial Vector2D VectorPointToPoint(Point2D start, Point2D endPt);', 'function_to_bind': 'vector_point_to_point'}
{'function_definition': 'public static partial Vector2D VectorSubtract(Vector2D v1, Vector2D v2);', 'function_to_bind': 'vector_subtract'}
{'function_definition': 'public static partial Vector2D VectorTo(Point2D p1);', 'function_to_bind': 'vector_to'}
{'function_definition': 'public static partial Vector2D VectorTo(double x, double y);', 'function_to_bind': 'vector_to'}
{'function_definition': 'public static partial string VectorToString(Vector2D v);', 'function_to_bind': 'vector_to_string'}
{'function_definition': 'public static partial bool VectorsEqual(Vector2D v1, Vector2D v2);', 'function_to_bind': 'vectors_equal'}
{'function_definition': 'public static partial bool VectorsNotEqual(Vector2D v1, Vector2D v2);', 'function_to_bind': 'vectors_not_equal'}
{'function_definition': 'public static partial AdcDevice AdcDeviceNamed(string name);', 'function_to_bind': 'adc_device_named'}
{'function_definition': 'public static partial void CloseAdc(AdcDevice adc);', 'function_to_bind': 'close_adc'}
{'function_definition': 'public static partial void CloseAdc(string name);', 'function_to_bind': 'close_adc'}
{'function_definition': 'public static partial void CloseAllAdc();', 'function_to_bind': 'close_all_adc'}
{'function_definition': 'public static partial bool HasAdcDevice(string name);', 'function_to_bind': 'has_adc_device'}
{'function_definition': 'public static partial AdcDevice OpenAdc(string name, AdcType type);', 'function_to_bind': 'open_adc'}
{'function_definition': 'public static partial AdcDevice OpenAdc(string name, int bus, int address, AdcType type);', 'function_to_bind': 'open_adc'}
{'function_definition': 'public static partial int ReadAdc(AdcDevice adc, AdcPin channel);', 'function_to_bind': 'read_adc'}
{'function_definition': 'public static partial int ReadAdc(string name, AdcPin channel);', 'function_to_bind': 'read_adc'}
{'function_definition': 'public static partial bool HasGpio();', 'function_to_bind': 'has_gpio'}
{'function_definition': 'public static partial void RaspiCleanup();', 'function_to_bind': 'raspi_cleanup'}
{'function_definition': 'public static partial GpioPinMode RaspiGetMode(GpioPin pin);', 'function_to_bind': 'raspi_get_mode'}
{'function_definition': 'public static partial int RaspiGetServoPulsewidth(GpioPin pin);', 'function_to_bind': 'raspi_get_servo_pulsewidth'}
{'function_definition': 'public static partial void RaspiInit();', 'function_to_bind': 'raspi_init'}
{'function_definition': 'public static partial GpioPinValue RaspiRead(GpioPin pin);', 'function_to_bind': 'raspi_read'}
{'function_definition': 'public static partial void RaspiSetMode(GpioPin pin, GpioPinMode mode);', 'function_to_bind': 'raspi_set_mode'}
{'function_definition': 'public static partial void RaspiSetPullUpDown(GpioPin pin, PullUpDown pud);', 'function_to_bind': 'raspi_set_pull_up_down'}
{'function_definition': 'public static partial void RaspiSetPwmDutycycle(GpioPin pin, int dutycycle);', 'function_to_bind': 'raspi_set_pwm_dutycycle'}
{'function_definition': 'public static partial void RaspiSetPwmFrequency(GpioPin pin, int frequency);', 'function_to_bind': 'raspi_set_pwm_frequency'}
{'function_definition': 'public static partial void RaspiSetPwmRange(GpioPin pin, int range);', 'function_to_bind': 'raspi_set_pwm_range'}
{'function_definition': 'public static partial void RaspiSetServoPulsewidth(GpioPin pin, int pulsewidth);', 'function_to_bind': 'raspi_set_servo_pulsewidth'}
{'function_definition': 'public static partial int RaspiSpiClose(int handle);', 'function_to_bind': 'raspi_spi_close'}
{'function_definition': 'public static partial int RaspiSpiOpen(int channel, int speed, int spiFlags);', 'function_to_bind': 'raspi_spi_open'}
{'function_definition': 'public static partial string RaspiSpiTransfer(int handle, string send, int count, ref int bytesTransfered);', 'function_to_bind': 'raspi_spi_transfer'}
{'function_definition': 'public static partial void RaspiWrite(GpioPin pin, GpioPinValue value);', 'function_to_bind': 'raspi_write'}
{'function_definition': 'public static partial bool RemoteRaspiCleanup(Connection pi);', 'function_to_bind': 'remote_raspi_cleanup'}
{'function_definition': 'public static partial GpioPinMode RemoteRaspiGetMode(Connection pi, GpioPin pin);', 'function_to_bind': 'remote_raspi_get_mode'}
{'function_definition': 'public static partial Connection RemoteRaspiInit(string name, string host, ushort port);', 'function_to_bind': 'remote_raspi_init'}
{'function_definition': 'public static partial GpioPinValue RemoteRaspiRead(Connection pi, GpioPin pin);', 'function_to_bind': 'remote_raspi_read'}
{'function_definition': 'public static partial void RemoteRaspiSetMode(Connection pi, GpioPin pin, GpioPinMode mode);', 'function_to_bind': 'remote_raspi_set_mode'}
{'function_definition': 'public static partial void RemoteRaspiSetPullUpDown(Connection pi, GpioPin pin, PullUpDown pud);', 'function_to_bind': 'remote_raspi_set_pull_up_down'}
{'function_definition': 'public static partial void RemoteRaspiSetPwmDutycycle(Connection pi, GpioPin pin, int dutycycle);', 'function_to_bind': 'remote_raspi_set_pwm_dutycycle'}
{'function_definition': 'public static partial void RemoteRaspiSetPwmFrequency(Connection pi, GpioPin pin, int frequency);', 'function_to_bind': 'remote_raspi_set_pwm_frequency'}
{'function_definition': 'public static partial void RemoteRaspiSetPwmRange(Connection pi, GpioPin pin, int range);', 'function_to_bind': 'remote_raspi_set_pwm_range'}
{'function_definition': 'public static partial void RemoteRaspiWrite(Connection pi, GpioPin pin, GpioPinValue value);', 'function_to_bind': 'remote_raspi_write'}
{'function_definition': 'public static partial int ToInt(GpioPinValue value);', 'function_to_bind': 'to_int'}
{'function_definition': 'public static partial void FreeResourceBundle(string name);', 'function_to_bind': 'free_resource_bundle'}
{'function_definition': 'public static partial bool HasResourceBundle(string name);', 'function_to_bind': 'has_resource_bundle'}
{'function_definition': 'public static partial void LoadResourceBundle(string name, string filename);', 'function_to_bind': 'load_resource_bundle'}
{'function_definition': 'public static partial void DeregisterFreeNotifier(FreeNotifier handler);', 'function_to_bind': 'deregister_free_notifier'}
{'function_definition': 'public static partial string PathToResource(string filename, ResourceKind kind);', 'function_to_bind': 'path_to_resource'}
{'function_definition': 'public static partial string PathToResources();', 'function_to_bind': 'path_to_resources'}
{'function_definition': 'public static partial string PathToResources(ResourceKind kind);', 'function_to_bind': 'path_to_resources'}
{'function_definition': 'public static partial void RegisterFreeNotifier(FreeNotifier fn);', 'function_to_bind': 'register_free_notifier'}
{'function_definition': 'public static partial void SetResourcesPath(string path);', 'function_to_bind': 'set_resources_path'}
{'function_definition': 'public static partial void CallForAllSprites(SpriteFloatFunction fn, float val);', 'function_to_bind': 'call_for_all_sprites'}
{'function_definition': 'public static partial void CallForAllSprites(SpriteFunction fn);', 'function_to_bind': 'call_for_all_sprites'}
{'function_definition': 'public static partial void CallOnSpriteEvent(SpriteEventHandler handler);', 'function_to_bind': 'call_on_sprite_event'}
{'function_definition': 'public static partial Sprite CreateSprite(Bitmap layer);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public static partial Sprite CreateSprite(Bitmap layer, AnimationScript ani);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public static partial Sprite CreateSprite(string bitmapName);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public static partial Sprite CreateSprite(string name, Bitmap layer);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public static partial Sprite CreateSprite(string name, Bitmap layer, AnimationScript ani);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public static partial Sprite CreateSprite(string bitmapName, string animationName);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public static partial void CreateSpritePack(string name);', 'function_to_bind': 'create_sprite_pack'}
{'function_definition': 'public static partial string CurrentSpritePack();', 'function_to_bind': 'current_sprite_pack'}
{'function_definition': 'public static partial void DrawAllSprites();', 'function_to_bind': 'draw_all_sprites'}
{'function_definition': 'public static partial void DrawSprite(Sprite s, Vector2D offset);', 'function_to_bind': 'draw_sprite'}
{'function_definition': 'public static partial void DrawSprite(Sprite s);', 'function_to_bind': 'draw_sprite'}
{'function_definition': 'public static partial void DrawSprite(Sprite s, double xOffset, double yOffset);', 'function_to_bind': 'draw_sprite'}
{'function_definition': 'public static partial void FreeAllSprites();', 'function_to_bind': 'free_all_sprites'}
{'function_definition': 'public static partial void FreeSprite(Sprite s);', 'function_to_bind': 'free_sprite'}
{'function_definition': 'public static partial void FreeSpritePack(string name);', 'function_to_bind': 'free_sprite_pack'}
{'function_definition': 'public static partial bool HasSprite(string name);', 'function_to_bind': 'has_sprite'}
{'function_definition': 'public static partial bool HasSpritePack(string name);', 'function_to_bind': 'has_sprite_pack'}
{'function_definition': 'public static partial void MoveSprite(Sprite s);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public static partial void MoveSprite(Sprite s, Vector2D distance);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public static partial void MoveSprite(Sprite s, Vector2D distance, float pct);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public static partial void MoveSprite(Sprite s, float pct);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public static partial void MoveSpriteTo(Sprite s, double x, double y);', 'function_to_bind': 'move_sprite_to'}
{'function_definition': 'public static partial void SelectSpritePack(string name);', 'function_to_bind': 'select_sprite_pack'}
{'function_definition': 'public static partial int SpriteAddLayer(Sprite s, Bitmap newLayer, string layerName);', 'function_to_bind': 'sprite_add_layer'}
{'function_definition': 'public static partial void SpriteAddToVelocity(Sprite s, Vector2D value);', 'function_to_bind': 'sprite_add_to_velocity'}
{'function_definition': 'public static partial void SpriteAddValue(Sprite s, string name);', 'function_to_bind': 'sprite_add_value'}
{'function_definition': 'public static partial void SpriteAddValue(Sprite s, string name, float initVal);', 'function_to_bind': 'sprite_add_value'}
{'function_definition': 'public static partial Point2D SpriteAnchorPoint(Sprite s);', 'function_to_bind': 'sprite_anchor_point'}
{'function_definition': 'public static partial Point2D SpriteAnchorPosition(Sprite s);', 'function_to_bind': 'sprite_anchor_position'}
{'function_definition': 'public static partial bool SpriteAnimationHasEnded(Sprite s);', 'function_to_bind': 'sprite_animation_has_ended'}
{'function_definition': 'public static partial string SpriteAnimationName(Sprite s);', 'function_to_bind': 'sprite_animation_name'}
{'function_definition': 'public static partial bool SpriteAt(Sprite s, Point2D pt);', 'function_to_bind': 'sprite_at'}
{'function_definition': 'public static partial void SpriteBringLayerForward(Sprite s, int visibleLayer);', 'function_to_bind': 'sprite_bring_layer_forward'}
{'function_definition': 'public static partial void SpriteBringLayerToFront(Sprite s, int visibleLayer);', 'function_to_bind': 'sprite_bring_layer_to_front'}
{'function_definition': 'public static partial void SpriteCallOnEvent(Sprite s, SpriteEventHandler handler);', 'function_to_bind': 'sprite_call_on_event'}
{'function_definition': 'public static partial Point2D SpriteCenterPoint(Sprite s);', 'function_to_bind': 'sprite_center_point'}
{'function_definition': 'public static partial Circle SpriteCircle(Sprite s);', 'function_to_bind': 'sprite_circle'}
{'function_definition': 'public static partial Bitmap SpriteCollisionBitmap(Sprite s);', 'function_to_bind': 'sprite_collision_bitmap'}
{'function_definition': 'public static partial Circle SpriteCollisionCircle(Sprite s);', 'function_to_bind': 'sprite_collision_circle'}
{'function_definition': 'public static partial CollisionTestKind SpriteCollisionKind(Sprite s);', 'function_to_bind': 'sprite_collision_kind'}
{'function_definition': 'public static partial Rectangle SpriteCollisionRectangle(Sprite s);', 'function_to_bind': 'sprite_collision_rectangle'}
{'function_definition': 'public static partial int SpriteCurrentCell(Sprite s);', 'function_to_bind': 'sprite_current_cell'}
{'function_definition': 'public static partial Rectangle SpriteCurrentCellRectangle(Sprite s);', 'function_to_bind': 'sprite_current_cell_rectangle'}
{'function_definition': 'public static partial double SpriteDx(Sprite s);', 'function_to_bind': 'sprite_dx'}
{'function_definition': 'public static partial double SpriteDy(Sprite s);', 'function_to_bind': 'sprite_dy'}
{'function_definition': 'public static partial bool SpriteHasValue(Sprite s, string name);', 'function_to_bind': 'sprite_has_value'}
{'function_definition': 'public static partial float SpriteHeading(Sprite s);', 'function_to_bind': 'sprite_heading'}
{'function_definition': 'public static partial int SpriteHeight(Sprite s);', 'function_to_bind': 'sprite_height'}
{'function_definition': 'public static partial void SpriteHideLayer(Sprite s, string name);', 'function_to_bind': 'sprite_hide_layer'}
{'function_definition': 'public static partial void SpriteHideLayer(Sprite s, int id);', 'function_to_bind': 'sprite_hide_layer'}
{'function_definition': 'public static partial Bitmap SpriteLayer(Sprite s, string name);', 'function_to_bind': 'sprite_layer'}
{'function_definition': 'public static partial Bitmap SpriteLayer(Sprite s, int idx);', 'function_to_bind': 'sprite_layer'}
{'function_definition': 'public static partial Circle SpriteLayerCircle(Sprite s, string name);', 'function_to_bind': 'sprite_layer_circle'}
{'function_definition': 'public static partial Circle SpriteLayerCircle(Sprite s, int idx);', 'function_to_bind': 'sprite_layer_circle'}
{'function_definition': 'public static partial int SpriteLayerCount(Sprite s);', 'function_to_bind': 'sprite_layer_count'}
{'function_definition': 'public static partial int SpriteLayerHeight(Sprite s, string name);', 'function_to_bind': 'sprite_layer_height'}
{'function_definition': 'public static partial int SpriteLayerHeight(Sprite s, int idx);', 'function_to_bind': 'sprite_layer_height'}
{'function_definition': 'public static partial int SpriteLayerIndex(Sprite s, string name);', 'function_to_bind': 'sprite_layer_index'}
{'function_definition': 'public static partial string SpriteLayerName(Sprite s, int idx);', 'function_to_bind': 'sprite_layer_name'}
{'function_definition': 'public static partial Vector2D SpriteLayerOffset(Sprite s, string name);', 'function_to_bind': 'sprite_layer_offset'}
{'function_definition': 'public static partial Vector2D SpriteLayerOffset(Sprite s, int idx);', 'function_to_bind': 'sprite_layer_offset'}
{'function_definition': 'public static partial Rectangle SpriteLayerRectangle(Sprite s, string name);', 'function_to_bind': 'sprite_layer_rectangle'}
{'function_definition': 'public static partial Rectangle SpriteLayerRectangle(Sprite s, int idx);', 'function_to_bind': 'sprite_layer_rectangle'}
{'function_definition': 'public static partial int SpriteLayerWidth(Sprite s, string name);', 'function_to_bind': 'sprite_layer_width'}
{'function_definition': 'public static partial int SpriteLayerWidth(Sprite s, int idx);', 'function_to_bind': 'sprite_layer_width'}
{'function_definition': 'public static partial Matrix2D SpriteLocationMatrix(Sprite s);', 'function_to_bind': 'sprite_location_matrix'}
{'function_definition': 'public static partial float SpriteMass(Sprite s);', 'function_to_bind': 'sprite_mass'}
{'function_definition': 'public static partial bool SpriteMoveFromAnchorPoint(Sprite s);', 'function_to_bind': 'sprite_move_from_anchor_point'}
{'function_definition': 'public static partial void SpriteMoveTo(Sprite s, Point2D pt, float takingSeconds);', 'function_to_bind': 'sprite_move_to'}
{'function_definition': 'public static partial string SpriteName(Sprite s);', 'function_to_bind': 'sprite_name'}
{'function_definition': 'public static partial Sprite SpriteNamed(string name);', 'function_to_bind': 'sprite_named'}
{'function_definition': 'public static partial bool SpriteOffscreen(Sprite s);', 'function_to_bind': 'sprite_offscreen'}
{'function_definition': 'public static partial bool SpriteOnScreenAt(Sprite s, Point2D pt);', 'function_to_bind': 'sprite_on_screen_at'}
{'function_definition': 'public static partial bool SpriteOnScreenAt(Sprite s, double x, double y);', 'function_to_bind': 'sprite_on_screen_at'}
{'function_definition': 'public static partial Point2D SpritePosition(Sprite s);', 'function_to_bind': 'sprite_position'}
{'function_definition': 'public static partial void SpriteReplayAnimation(Sprite s);', 'function_to_bind': 'sprite_replay_animation'}
{'function_definition': 'public static partial void SpriteReplayAnimation(Sprite s, bool withSound);', 'function_to_bind': 'sprite_replay_animation'}
{'function_definition': 'public static partial float SpriteRotation(Sprite s);', 'function_to_bind': 'sprite_rotation'}
{'function_definition': 'public static partial float SpriteScale(Sprite s);', 'function_to_bind': 'sprite_scale'}
{'function_definition': 'public static partial Rectangle SpriteScreenRectangle(Sprite s);', 'function_to_bind': 'sprite_screen_rectangle'}
{'function_definition': 'public static partial void SpriteSendLayerBackward(Sprite s, int visibleLayer);', 'function_to_bind': 'sprite_send_layer_backward'}
{'function_definition': 'public static partial void SpriteSendLayerToBack(Sprite s, int visibleLayer);', 'function_to_bind': 'sprite_send_layer_to_back'}
{'function_definition': 'public static partial void SpriteSetAnchorPoint(Sprite s, Point2D pt);', 'function_to_bind': 'sprite_set_anchor_point'}
{'function_definition': 'public static partial void SpriteSetCollisionBitmap(Sprite s, Bitmap bmp);', 'function_to_bind': 'sprite_set_collision_bitmap'}
{'function_definition': 'public static partial void SpriteSetCollisionKind(Sprite s, CollisionTestKind value);', 'function_to_bind': 'sprite_set_collision_kind'}
{'function_definition': 'public static partial void SpriteSetDx(Sprite s, double value);', 'function_to_bind': 'sprite_set_dx'}
{'function_definition': 'public static partial void SpriteSetDy(Sprite s, double value);', 'function_to_bind': 'sprite_set_dy'}
{'function_definition': 'public static partial void SpriteSetHeading(Sprite s, float value);', 'function_to_bind': 'sprite_set_heading'}
{'function_definition': 'public static partial void SpriteSetLayerOffset(Sprite s, string name, Vector2D value);', 'function_to_bind': 'sprite_set_layer_offset'}
{'function_definition': 'public static partial void SpriteSetLayerOffset(Sprite s, int idx, Vector2D value);', 'function_to_bind': 'sprite_set_layer_offset'}
{'function_definition': 'public static partial void SpriteSetMass(Sprite s, float value);', 'function_to_bind': 'sprite_set_mass'}
{'function_definition': 'public static partial void SpriteSetMoveFromAnchorPoint(Sprite s, bool value);', 'function_to_bind': 'sprite_set_move_from_anchor_point'}
{'function_definition': 'public static partial void SpriteSetPosition(Sprite s, Point2D value);', 'function_to_bind': 'sprite_set_position'}
{'function_definition': 'public static partial void SpriteSetRotation(Sprite s, float value);', 'function_to_bind': 'sprite_set_rotation'}
{'function_definition': 'public static partial void SpriteSetScale(Sprite s, float value);', 'function_to_bind': 'sprite_set_scale'}
{'function_definition': 'public static partial void SpriteSetSpeed(Sprite s, double value);', 'function_to_bind': 'sprite_set_speed'}
{'function_definition': 'public static partial void SpriteSetValue(Sprite s, string name, float val);', 'function_to_bind': 'sprite_set_value'}
{'function_definition': 'public static partial void SpriteSetVelocity(Sprite s, Vector2D value);', 'function_to_bind': 'sprite_set_velocity'}
{'function_definition': 'public static partial void SpriteSetX(Sprite s, double value);', 'function_to_bind': 'sprite_set_x'}
{'function_definition': 'public static partial void SpriteSetY(Sprite s, double value);', 'function_to_bind': 'sprite_set_y'}
{'function_definition': 'public static partial int SpriteShowLayer(Sprite s, string name);', 'function_to_bind': 'sprite_show_layer'}
{'function_definition': 'public static partial int SpriteShowLayer(Sprite s, int id);', 'function_to_bind': 'sprite_show_layer'}
{'function_definition': 'public static partial double SpriteSpeed(Sprite s);', 'function_to_bind': 'sprite_speed'}
{'function_definition': 'public static partial void SpriteStartAnimation(Sprite s, string named);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public static partial void SpriteStartAnimation(Sprite s, string named, bool withSound);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public static partial void SpriteStartAnimation(Sprite s, int idx);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public static partial void SpriteStartAnimation(Sprite s, int idx, bool withSound);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public static partial void SpriteStopCallingOnEvent(Sprite s, SpriteEventHandler handler);', 'function_to_bind': 'sprite_stop_calling_on_event'}
{'function_definition': 'public static partial void SpriteToggleLayerVisible(Sprite s, string name);', 'function_to_bind': 'sprite_toggle_layer_visible'}
{'function_definition': 'public static partial void SpriteToggleLayerVisible(Sprite s, int id);', 'function_to_bind': 'sprite_toggle_layer_visible'}
{'function_definition': 'public static partial float SpriteValue(Sprite s, string name);', 'function_to_bind': 'sprite_value'}
{'function_definition': 'public static partial int SpriteValueCount(Sprite s);', 'function_to_bind': 'sprite_value_count'}
{'function_definition': 'public static partial Vector2D SpriteVelocity(Sprite s);', 'function_to_bind': 'sprite_velocity'}
{'function_definition': 'public static partial int SpriteVisibleIndexOfLayer(Sprite s, string name);', 'function_to_bind': 'sprite_visible_index_of_layer'}
{'function_definition': 'public static partial int SpriteVisibleIndexOfLayer(Sprite s, int id);', 'function_to_bind': 'sprite_visible_index_of_layer'}
{'function_definition': 'public static partial int SpriteVisibleLayer(Sprite s, int idx);', 'function_to_bind': 'sprite_visible_layer'}
{'function_definition': 'public static partial int SpriteVisibleLayerCount(Sprite s);', 'function_to_bind': 'sprite_visible_layer_count'}
{'function_definition': 'public static partial int SpriteVisibleLayerId(Sprite s, int idx);', 'function_to_bind': 'sprite_visible_layer_id'}
{'function_definition': 'public static partial int SpriteWidth(Sprite s);', 'function_to_bind': 'sprite_width'}
{'function_definition': 'public static partial double SpriteX(Sprite s);', 'function_to_bind': 'sprite_x'}
{'function_definition': 'public static partial double SpriteY(Sprite s);', 'function_to_bind': 'sprite_y'}
{'function_definition': 'public static partial void StopCallingOnSpriteEvent(SpriteEventHandler handler);', 'function_to_bind': 'stop_calling_on_sprite_event'}
{'function_definition': 'public static partial void UpdateAllSprites();', 'function_to_bind': 'update_all_sprites'}
{'function_definition': 'public static partial void UpdateAllSprites(float pct);', 'function_to_bind': 'update_all_sprites'}
{'function_definition': 'public static partial void UpdateSprite(Sprite s);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public static partial void UpdateSprite(Sprite s, bool withSound);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public static partial void UpdateSprite(Sprite s, float pct);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public static partial void UpdateSprite(Sprite s, float pct, bool withSound);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public static partial void UpdateSpriteAnimation(Sprite s);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public static partial void UpdateSpriteAnimation(Sprite s, bool withSound);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public static partial void UpdateSpriteAnimation(Sprite s, float pct);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public static partial void UpdateSpriteAnimation(Sprite s, float pct, bool withSound);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public static partial Vector2D VectorFromCenterSpriteToPoint(Sprite s, Point2D pt);', 'function_to_bind': 'vector_from_center_sprite_to_point'}
{'function_definition': 'public static partial Vector2D VectorFromTo(Sprite s1, Sprite s2);', 'function_to_bind': 'vector_from_to'}
{'function_definition': 'public static partial char ReadChar();', 'function_to_bind': 'read_char'}
{'function_definition': 'public static partial string ReadLine();', 'function_to_bind': 'read_line'}
{'function_definition': 'public static partial bool TerminalHasInput();', 'function_to_bind': 'terminal_has_input'}
{'function_definition': 'public static partial void Write(char data);', 'function_to_bind': 'write'}
{'function_definition': 'public static partial void Write(double data);', 'function_to_bind': 'write'}
{'function_definition': 'public static partial void Write(int data);', 'function_to_bind': 'write'}
{'function_definition': 'public static partial void Write(string text);', 'function_to_bind': 'write'}
{'function_definition': 'public static partial void WriteLine(char data);', 'function_to_bind': 'write_line'}
{'function_definition': 'public static partial void WriteLine();', 'function_to_bind': 'write_line'}
{'function_definition': 'public static partial void WriteLine(double data);', 'function_to_bind': 'write_line'}
{'function_definition': 'public static partial void WriteLine(int data);', 'function_to_bind': 'write_line'}
{'function_definition': 'public static partial void WriteLine(string line);', 'function_to_bind': 'write_line'}
{'function_definition': 'public static partial Timer CreateTimer(string name);', 'function_to_bind': 'create_timer'}
{'function_definition': 'public static partial void FreeAllTimers();', 'function_to_bind': 'free_all_timers'}
{'function_definition': 'public static partial void FreeTimer(Timer toFree);', 'function_to_bind': 'free_timer'}
{'function_definition': 'public static partial bool HasTimer(string name);', 'function_to_bind': 'has_timer'}
{'function_definition': 'public static partial void PauseTimer(string name);', 'function_to_bind': 'pause_timer'}
{'function_definition': 'public static partial void PauseTimer(Timer toPause);', 'function_to_bind': 'pause_timer'}
{'function_definition': 'public static partial void ResetTimer(string name);', 'function_to_bind': 'reset_timer'}
{'function_definition': 'public static partial void ResetTimer(Timer tmr);', 'function_to_bind': 'reset_timer'}
{'function_definition': 'public static partial void ResumeTimer(string name);', 'function_to_bind': 'resume_timer'}
{'function_definition': 'public static partial void ResumeTimer(Timer toResume);', 'function_to_bind': 'resume_timer'}
{'function_definition': 'public static partial void StartTimer(string name);', 'function_to_bind': 'start_timer'}
{'function_definition': 'public static partial void StartTimer(Timer toStart);', 'function_to_bind': 'start_timer'}
{'function_definition': 'public static partial void StopTimer(string name);', 'function_to_bind': 'stop_timer'}
{'function_definition': 'public static partial void StopTimer(Timer toStop);', 'function_to_bind': 'stop_timer'}
{'function_definition': 'public static partial Timer TimerNamed(string name);', 'function_to_bind': 'timer_named'}
{'function_definition': 'public static partial bool TimerPaused(string name);', 'function_to_bind': 'timer_paused'}
{'function_definition': 'public static partial bool TimerPaused(Timer toGet);', 'function_to_bind': 'timer_paused'}
{'function_definition': 'public static partial bool TimerStarted(string name);', 'function_to_bind': 'timer_started'}
{'function_definition': 'public static partial bool TimerStarted(Timer toGet);', 'function_to_bind': 'timer_started'}
{'function_definition': 'public static partial uint TimerTicks(string name);', 'function_to_bind': 'timer_ticks'}
{'function_definition': 'public static partial uint TimerTicks(Timer toGet);', 'function_to_bind': 'timer_ticks'}
{'function_definition': 'public static partial string Base64Decode(string input);', 'function_to_bind': 'base64_decode'}
{'function_definition': 'public static partial string Base64Encode(string input);', 'function_to_bind': 'base64_encode'}
{'function_definition': 'public static partial uint BinToDec(string bin);', 'function_to_bind': 'bin_to_dec'}
{'function_definition': 'public static partial string BinToHex(string binStr);', 'function_to_bind': 'bin_to_hex'}
{'function_definition': 'public static partial string BinToOct(string binStr);', 'function_to_bind': 'bin_to_oct'}
{'function_definition': 'public static partial bool Contains(string text, string subtext);', 'function_to_bind': 'contains'}
{'function_definition': 'public static partial double ConvertToDouble(string text);', 'function_to_bind': 'convert_to_double'}
{'function_definition': 'public static partial int ConvertToInteger(string text);', 'function_to_bind': 'convert_to_integer'}
{'function_definition': 'public static partial string DecToBin(uint dec);', 'function_to_bind': 'dec_to_bin'}
{'function_definition': 'public static partial string DecToOct(uint decimalValue);', 'function_to_bind': 'dec_to_oct'}
{'function_definition': 'public static partial int GreatestCommonDivisor(int number1, int number2);', 'function_to_bind': 'greatest_common_divisor'}
{'function_definition': 'public static partial string HexToBin(string hexStr);', 'function_to_bind': 'hex_to_bin'}
{'function_definition': 'public static partial uint HexToDec(string hexString);', 'function_to_bind': 'hex_to_dec'}
{'function_definition': 'public static partial string HexToOct(string hexStr);', 'function_to_bind': 'hex_to_oct'}
{'function_definition': 'public static partial int IndexOf(string text, string subtext);', 'function_to_bind': 'index_of'}
{'function_definition': 'public static partial bool IsBinary(string binStr);', 'function_to_bind': 'is_binary'}
{'function_definition': 'public static partial bool IsDouble(string text);', 'function_to_bind': 'is_double'}
{'function_definition': 'public static partial bool IsHex(string hexStr);', 'function_to_bind': 'is_hex'}
{'function_definition': 'public static partial bool IsInteger(string text);', 'function_to_bind': 'is_integer'}
{'function_definition': 'public static partial bool IsNumber(string text);', 'function_to_bind': 'is_number'}
{'function_definition': 'public static partial bool IsOctal(string octalStr);', 'function_to_bind': 'is_octal'}
{'function_definition': 'public static partial bool IsPrimeNumber(int number);', 'function_to_bind': 'is_prime_number'}
{'function_definition': 'public static partial int LeastCommonMultiple(int number1, int number2);', 'function_to_bind': 'least_common_multiple'}
{'function_definition': 'public static partial int LengthOf(string text);', 'function_to_bind': 'length_of'}
{'function_definition': 'public static partial string OctToBin(string octalStr);', 'function_to_bind': 'oct_to_bin'}
{'function_definition': 'public static partial uint OctToDec(string octalString);', 'function_to_bind': 'oct_to_dec'}
{'function_definition': 'public static partial string OctToHex(string octStr);', 'function_to_bind': 'oct_to_hex'}
{'function_definition': 'public static partial string ReplaceAll(string text, string substr, string newText);', 'function_to_bind': 'replace_all'}
{'function_definition': 'public static partial List<string> Split(string text, char delimiter);', 'function_to_bind': 'split'}
{'function_definition': 'public static partial double SquareRoot(int number);', 'function_to_bind': 'square_root'}
{'function_definition': 'public static partial string ToLowercase(string text);', 'function_to_bind': 'to_lowercase'}
{'function_definition': 'public static partial string ToUppercase(string text);', 'function_to_bind': 'to_uppercase'}
{'function_definition': 'public static partial string Trim(string text);', 'function_to_bind': 'trim'}
{'function_definition': 'public static partial int Rnd(int min, int max);', 'function_to_bind': 'rnd'}
{'function_definition': 'public static partial float Rnd();', 'function_to_bind': 'rnd'}
{'function_definition': 'public static partial int Rnd(int ubound);', 'function_to_bind': 'rnd'}
{'function_definition': 'public static partial uint CurrentTicks();', 'function_to_bind': 'current_ticks'}
{'function_definition': 'public static partial void Delay(int milliseconds);', 'function_to_bind': 'delay'}
{'function_definition': 'public static partial void DisplayDialog(string title, string msg, Font outputFont, int fontSize);', 'function_to_bind': 'display_dialog'}
{'function_definition': 'public static partial string FileAsString(string filename, ResourceKind kind);', 'function_to_bind': 'file_as_string'}
{'function_definition': 'public static partial void ClearWindow(Window wind, Color clr);', 'function_to_bind': 'clear_window'}
{'function_definition': 'public static partial void CloseAllWindows();', 'function_to_bind': 'close_all_windows'}
{'function_definition': 'public static partial void CloseCurrentWindow();', 'function_to_bind': 'close_current_window'}
{'function_definition': 'public static partial void CloseWindow(string name);', 'function_to_bind': 'close_window'}
{'function_definition': 'public static partial void CloseWindow(Window wind);', 'function_to_bind': 'close_window'}
{'function_definition': 'public static partial Window CurrentWindow();', 'function_to_bind': 'current_window'}
{'function_definition': 'public static partial bool CurrentWindowHasBorder();', 'function_to_bind': 'current_window_has_border'}
{'function_definition': 'public static partial int CurrentWindowHeight();', 'function_to_bind': 'current_window_height'}
{'function_definition': 'public static partial bool CurrentWindowIsFullscreen();', 'function_to_bind': 'current_window_is_fullscreen'}
{'function_definition': 'public static partial Point2D CurrentWindowPosition();', 'function_to_bind': 'current_window_position'}
{'function_definition': 'public static partial void CurrentWindowToggleBorder();', 'function_to_bind': 'current_window_toggle_border'}
{'function_definition': 'public static partial void CurrentWindowToggleFullscreen();', 'function_to_bind': 'current_window_toggle_fullscreen'}
{'function_definition': 'public static partial int CurrentWindowWidth();', 'function_to_bind': 'current_window_width'}
{'function_definition': 'public static partial int CurrentWindowX();', 'function_to_bind': 'current_window_x'}
{'function_definition': 'public static partial int CurrentWindowY();', 'function_to_bind': 'current_window_y'}
{'function_definition': 'public static partial bool HasWindow(string caption);', 'function_to_bind': 'has_window'}
{'function_definition': 'public static partial bool IsCurrentWindow(Window wind);', 'function_to_bind': 'is_current_window'}
{'function_definition': 'public static partial void MoveCurrentWindowTo(int x, int y);', 'function_to_bind': 'move_current_window_to'}
{'function_definition': 'public static partial void MoveWindowTo(string name, int x, int y);', 'function_to_bind': 'move_window_to'}
{'function_definition': 'public static partial void MoveWindowTo(Window wind, int x, int y);', 'function_to_bind': 'move_window_to'}
{'function_definition': 'public static partial Window OpenWindow(string caption, int width, int height);', 'function_to_bind': 'open_window'}
{'function_definition': 'public static partial void RefreshWindow(Window wind);', 'function_to_bind': 'refresh_window'}
{'function_definition': 'public static partial void RefreshWindow(Window wind, uint targetFps);', 'function_to_bind': 'refresh_window'}
{'function_definition': 'public static partial void ResizeCurrentWindow(int width, int height);', 'function_to_bind': 'resize_current_window'}
{'function_definition': 'public static partial void ResizeWindow(Window wnd, int width, int height);', 'function_to_bind': 'resize_window'}
{'function_definition': 'public static partial void SetCurrentWindow(string name);', 'function_to_bind': 'set_current_window'}
{'function_definition': 'public static partial void SetCurrentWindow(Window wind);', 'function_to_bind': 'set_current_window'}
{'function_definition': 'public static partial string WindowCaption(Window wind);', 'function_to_bind': 'window_caption'}
{'function_definition': 'public static partial bool WindowCloseRequested(string name);', 'function_to_bind': 'window_close_requested'}
{'function_definition': 'public static partial bool WindowCloseRequested(Window wind);', 'function_to_bind': 'window_close_requested'}
{'function_definition': 'public static partial bool WindowHasBorder(string name);', 'function_to_bind': 'window_has_border'}
{'function_definition': 'public static partial bool WindowHasBorder(Window wnd);', 'function_to_bind': 'window_has_border'}
{'function_definition': 'public static partial bool WindowHasFocus(Window wind);', 'function_to_bind': 'window_has_focus'}
{'function_definition': 'public static partial int WindowHeight(string name);', 'function_to_bind': 'window_height'}
{'function_definition': 'public static partial int WindowHeight(Window wind);', 'function_to_bind': 'window_height'}
{'function_definition': 'public static partial bool WindowIsFullscreen(string name);', 'function_to_bind': 'window_is_fullscreen'}
{'function_definition': 'public static partial bool WindowIsFullscreen(Window wnd);', 'function_to_bind': 'window_is_fullscreen'}
{'function_definition': 'public static partial Window WindowNamed(string caption);', 'function_to_bind': 'window_named'}
{'function_definition': 'public static partial Point2D WindowPosition(string name);', 'function_to_bind': 'window_position'}
{'function_definition': 'public static partial Point2D WindowPosition(Window wnd);', 'function_to_bind': 'window_position'}
{'function_definition': 'public static partial void WindowSetIcon(Window wind, Bitmap bmp);', 'function_to_bind': 'window_set_icon'}
{'function_definition': 'public static partial void WindowToggleBorder(string name);', 'function_to_bind': 'window_toggle_border'}
{'function_definition': 'public static partial void WindowToggleBorder(Window wnd);', 'function_to_bind': 'window_toggle_border'}
{'function_definition': 'public static partial void WindowToggleFullscreen(string name);', 'function_to_bind': 'window_toggle_fullscreen'}
{'function_definition': 'public static partial void WindowToggleFullscreen(Window wnd);', 'function_to_bind': 'window_toggle_fullscreen'}
{'function_definition': 'public static partial int WindowWidth(string name);', 'function_to_bind': 'window_width'}
{'function_definition': 'public static partial int WindowWidth(Window wind);', 'function_to_bind': 'window_width'}
{'function_definition': 'public static partial Window WindowWithFocus();', 'function_to_bind': 'window_with_focus'}
{'function_definition': 'public static partial int WindowX(string name);', 'function_to_bind': 'window_x'}
{'function_definition': 'public static partial int WindowX(Window wnd);', 'function_to_bind': 'window_x'}
{'function_definition': 'public static partial int WindowY(string name);', 'function_to_bind': 'window_y'}
{'function_definition': 'public static partial int WindowY(Window wnd);', 'function_to_bind': 'window_y'}
{'function_definition': 'public partial int CurrentCell;', 'function_to_bind': 'animation_current_cell'}
{'function_definition': 'public partial Vector2D CurrentVector;', 'function_to_bind': 'animation_current_vector'}
{'function_definition': 'public partial bool Ended;', 'function_to_bind': 'animation_ended'}
{'function_definition': 'public partial bool EnteredFrame;', 'function_to_bind': 'animation_entered_frame'}
{'function_definition': 'public partial float FrameTime;', 'function_to_bind': 'animation_frame_time'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'animation_name'}
{'function_definition': 'public partial void Assign(AnimationScript script, string name);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(AnimationScript script, string name, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(AnimationScript script, int idx);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(AnimationScript script, int idx, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(string scriptName, string name);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(string scriptName, string name, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(int idx);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(int idx, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(string name);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public partial void Assign(string name, bool withSound);', 'function_to_bind': 'assign_animation'}
{'function_definition': 'public static partial void FreeAll();', 'function_to_bind': 'free_all_animation_scripts'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_animation'}
{'function_definition': 'public partial void Restart();', 'function_to_bind': 'restart_animation'}
{'function_definition': 'public partial void Restart(bool withSound);', 'function_to_bind': 'restart_animation'}
{'function_definition': 'public partial void Update();', 'function_to_bind': 'update_animation'}
{'function_definition': 'public partial void Update(float pct);', 'function_to_bind': 'update_animation'}
{'function_definition': 'public partial AnimationScript(string name, string filename);', 'function_to_bind': 'load_animation_script'}
{'function_definition': 'public partial Music(string name, string filename);', 'function_to_bind': 'load_music'}
{'function_definition': 'public partial SoundEffect(string name, string filename);', 'function_to_bind': 'load_sound_effect'}
{'function_definition': 'public partial Bitmap(string name, string filename);', 'function_to_bind': 'load_bitmap'}
{'function_definition': 'public partial Font(string name, string filename);', 'function_to_bind': 'load_font'}
{'function_definition': 'public static partial bool IsReady;', 'function_to_bind': 'audio_ready'}
{'function_definition': 'public static partial void FadeOut(int ms);', 'function_to_bind': 'fade_music_out'}
{'function_definition': 'public static partial void FreeAllMusic();', 'function_to_bind': 'free_all_music'}
{'function_definition': 'public static partial bool Playing;', 'function_to_bind': 'music_playing'}
{'function_definition': 'public static partial double Volume;', 'function_to_bind': 'music_volume'}
{'function_definition': 'public static partial void Pause();', 'function_to_bind': 'pause_music'}
{'function_definition': 'public static partial void Resume();', 'function_to_bind': 'resume_music'}
{'function_definition': 'public static partial void Volume { set }', 'function_to_bind': 'set_music_volume'}
{'function_definition': 'public static partial void Stop();', 'function_to_bind': 'stop_music'}
{'function_definition': 'public partial void FadeIn(int ms);', 'function_to_bind': 'fade_music_in'}
{'function_definition': 'public partial void FadeIn(int times, int ms);', 'function_to_bind': 'fade_music_in'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_music'}
{'function_definition': 'public partial string Filename;', 'function_to_bind': 'music_filename'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'music_name'}
{'function_definition': 'public partial void Play();', 'function_to_bind': 'play_music'}
{'function_definition': 'public partial void Play(int times);', 'function_to_bind': 'play_music'}
{'function_definition': 'public partial void Play(int times, double volume);', 'function_to_bind': 'play_music'}
{'function_definition': 'public partial void FadeOut(int ms);', 'function_to_bind': 'fade_sound_effect_out'}
{'function_definition': 'public partial void Close();', 'function_to_bind': 'free_sound_effect'}
{'function_definition': 'public partial void Play();', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public partial void Play(double volume);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public partial void Play(int times);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public partial void Play(int times, double volume);', 'function_to_bind': 'play_sound_effect'}
{'function_definition': 'public partial string Filename;', 'function_to_bind': 'sound_effect_filename'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'sound_effect_name'}
{'function_definition': 'public partial bool IsPlaying;', 'function_to_bind': 'sound_effect_playing'}
{'function_definition': 'public partial void Stop();', 'function_to_bind': 'stop_sound_effect'}
{'function_definition': 'public static partial Point2D Position;', 'function_to_bind': 'camera_position'}
{'function_definition': 'public static partial double X;', 'function_to_bind': 'camera_x'}
{'function_definition': 'public static partial double Y;', 'function_to_bind': 'camera_y'}
{'function_definition': 'public static partial void CenterOn(Sprite s, Vector2D offset);', 'function_to_bind': 'center_camera_on'}
{'function_definition': 'public static partial void CenterOn(Sprite s, double offsetX, double offsetY);', 'function_to_bind': 'center_camera_on'}
{'function_definition': 'public static partial void MoveBy(Vector2D offset);', 'function_to_bind': 'move_camera_by'}
{'function_definition': 'public static partial void MoveBy(double dx, double dy);', 'function_to_bind': 'move_camera_by'}
{'function_definition': 'public static partial void MoveTo(Point2D pt);', 'function_to_bind': 'move_camera_to'}
{'function_definition': 'public static partial void MoveTo(double x, double y);', 'function_to_bind': 'move_camera_to'}
{'function_definition': 'public static partial bool PointInWindow(Window wind, Point2D pt);', 'function_to_bind': 'point_in_window'}
{'function_definition': 'public static partial bool PointOnScreen(Point2D pt);', 'function_to_bind': 'point_on_screen'}
{'function_definition': 'public static partial bool RectInWindow(Window wind, Rectangle rect);', 'function_to_bind': 'rect_in_window'}
{'function_definition': 'public static partial bool RectOnScreen(Rectangle rect);', 'function_to_bind': 'rect_on_screen'}
{'function_definition': 'public static partial Point2D ScreenCenter;', 'function_to_bind': 'screen_center'}
{'function_definition': 'public static partial Rectangle ScreenRectangle;', 'function_to_bind': 'screen_rectangle'}
{'function_definition': 'public static partial void Position { set }', 'function_to_bind': 'set_camera_position'}
{'function_definition': 'public static partial void X { set }', 'function_to_bind': 'set_camera_x'}
{'function_definition': 'public static partial void Y { set }', 'function_to_bind': 'set_camera_y'}
{'function_definition': 'public static partial Point2D ToScreen(Point2D pt);', 'function_to_bind': 'to_screen'}
{'function_definition': 'public static partial Rectangle ToScreen(Rectangle rect);', 'function_to_bind': 'to_screen'}
{'function_definition': 'public static partial double ToScreenX(double worldX);', 'function_to_bind': 'to_screen_x'}
{'function_definition': 'public static partial double ToScreenY(double worldY);', 'function_to_bind': 'to_screen_y'}
{'function_definition': 'public static partial Point2D ToWorld(Point2D pt);', 'function_to_bind': 'to_world'}
{'function_definition': 'public static partial double ToWorldX(double screenX);', 'function_to_bind': 'to_world_x'}
{'function_definition': 'public static partial double ToWorldY(double screenY);', 'function_to_bind': 'to_world_y'}
{'function_definition': 'public static partial Vector2D VectorWorldToScreen;', 'function_to_bind': 'vector_world_to_screen'}
{'function_definition': 'public partial Rectangle Area;', 'function_to_bind': 'window_area'}
{'function_definition': 'public partial Point2D RandomPoint();', 'function_to_bind': 'random_window_point'}
{'function_definition': 'public partial void DrawCircle(Color clr, double x, double y, double radius);', 'function_to_bind': 'draw_circle_on_window'}
{'function_definition': 'public partial void DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'draw_circle_on_window'}
{'function_definition': 'public partial void FillCircle(Color clr, double x, double y, double radius);', 'function_to_bind': 'fill_circle_on_window'}
{'function_definition': 'public partial void FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'fill_circle_on_window'}
{'function_definition': 'public partial Rectangle CurrentClip();', 'function_to_bind': 'current_clip'}
{'function_definition': 'public partial void PopClip();', 'function_to_bind': 'pop_clip'}
{'function_definition': 'public partial void PushClip(Rectangle r);', 'function_to_bind': 'push_clip'}
{'function_definition': 'public partial void ResetClip();', 'function_to_bind': 'reset_clip'}
{'function_definition': 'public partial void SetClip(Rectangle r);', 'function_to_bind': 'set_clip'}
{'function_definition': 'public partial DrawingOptions OptionDrawTo();', 'function_to_bind': 'option_draw_to'}
{'function_definition': 'public partial DrawingOptions OptionDrawTo(DrawingOptions opts);', 'function_to_bind': 'option_draw_to'}
{'function_definition': 'public partial void DrawEllipse(Color clr, Rectangle rect);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public partial void DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public partial void DrawEllipse(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public partial void DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_window'}
{'function_definition': 'public partial void FillEllipse(Color clr, Rectangle rect);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public partial void FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public partial void FillEllipse(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public partial void FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_window'}
{'function_definition': 'public partial void TakeScreenshot(string basename);', 'function_to_bind': 'take_screenshot'}
{'function_definition': 'public partial void DrawBitmap(Bitmap bmp, double x, double y);', 'function_to_bind': 'draw_bitmap_on_window'}
{'function_definition': 'public partial void DrawBitmap(Bitmap bmp, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap_on_window'}
{'function_definition': 'public partial void DrawLine(Color clr, Line l);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public partial void DrawLine(Color clr, Line l, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public partial void DrawLine(Color clr, Point2D fromPt, Point2D toPt);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public partial void DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public partial void DrawLine(Color clr, double x1, double y1, double x2, double y2);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public partial void DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_window'}
{'function_definition': 'public partial void DrawPixel(Color clr, Point2D pt);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public partial void DrawPixel(Color clr, Point2D pt, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public partial void DrawPixel(Color clr, double x, double y);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public partial void DrawPixel(Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_window'}
{'function_definition': 'public partial void DrawQuad(Color clr, Quad q);', 'function_to_bind': 'draw_quad_on_window'}
{'function_definition': 'public partial void DrawQuad(Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'draw_quad_on_window'}
{'function_definition': 'public partial void DrawRectangle(Color clr, Rectangle rect);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public partial void DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public partial void DrawRectangle(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public partial void DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_window'}
{'function_definition': 'public partial void FillQuad(Color clr, Quad q);', 'function_to_bind': 'fill_quad_on_window'}
{'function_definition': 'public partial void FillQuad(Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'fill_quad_on_window'}
{'function_definition': 'public partial void FillRectangle(Color clr, Rectangle rect);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public partial void FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public partial void FillRectangle(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public partial void FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_window'}
{'function_definition': 'public partial void DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public partial void DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public partial void DrawText(string text, Color clr, double x, double y);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public partial void DrawText(string text, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public partial void DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public partial void DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_window'}
{'function_definition': 'public partial void DrawTriangle(Color clr, Triangle tri);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public partial void DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public partial void DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public partial void DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_window'}
{'function_definition': 'public partial void FillTriangle(Color clr, Triangle tri);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public partial void FillTriangle(Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public partial void FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public partial void FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_window'}
{'function_definition': 'public partial void EndReadingText();', 'function_to_bind': 'end_reading_text'}
{'function_definition': 'public partial bool ReadingText();', 'function_to_bind': 'reading_text'}
{'function_definition': 'public partial void StartReadingText(Rectangle rect);', 'function_to_bind': 'start_reading_text'}
{'function_definition': 'public partial void StartReadingText(Rectangle rect, string initialText);', 'function_to_bind': 'start_reading_text'}
{'function_definition': 'public partial bool TextEntryCancelled();', 'function_to_bind': 'text_entry_cancelled'}
{'function_definition': 'public partial string TextInput();', 'function_to_bind': 'text_input'}
{'function_definition': 'public partial void Clear(Color clr);', 'function_to_bind': 'clear_window'}
{'function_definition': 'public partial void Close();', 'function_to_bind': 'close_window'}
{'function_definition': 'public partial bool IsCurrentWindow;', 'function_to_bind': 'is_current_window'}
{'function_definition': 'public partial void MoveTo(int x, int y);', 'function_to_bind': 'move_window_to'}
{'function_definition': 'public partial void Refresh();', 'function_to_bind': 'refresh_window'}
{'function_definition': 'public partial void Refresh(uint targetFps);', 'function_to_bind': 'refresh_window'}
{'function_definition': 'public partial void Resize(int width, int height);', 'function_to_bind': 'resize_window'}
{'function_definition': 'public partial void MakeCurrent();', 'function_to_bind': 'set_current_window'}
{'function_definition': 'public partial string Caption;', 'function_to_bind': 'window_caption'}
{'function_definition': 'public partial bool CloseRequested;', 'function_to_bind': 'window_close_requested'}
{'function_definition': 'public partial bool HasBorder;', 'function_to_bind': 'window_has_border'}
{'function_definition': 'public partial bool HasFocus;', 'function_to_bind': 'window_has_focus'}
{'function_definition': 'public partial int Height;', 'function_to_bind': 'window_height'}
{'function_definition': 'public partial bool IsFullscreen;', 'function_to_bind': 'window_is_fullscreen'}
{'function_definition': 'public partial Point2D Position;', 'function_to_bind': 'window_position'}
{'function_definition': 'public partial void Icon { set }', 'function_to_bind': 'window_set_icon'}
{'function_definition': 'public partial void ToggleBorder();', 'function_to_bind': 'window_toggle_border'}
{'function_definition': 'public partial void ToggleFullscreen();', 'function_to_bind': 'window_toggle_fullscreen'}
{'function_definition': 'public partial int Width;', 'function_to_bind': 'window_width'}
{'function_definition': 'public partial int X;', 'function_to_bind': 'window_x'}
{'function_definition': 'public partial int Y;', 'function_to_bind': 'window_y'}
{'function_definition': 'public static partial Color AliceBlue;', 'function_to_bind': 'color_alice_blue'}
{'function_definition': 'public static partial Color AntiqueWhite;', 'function_to_bind': 'color_antique_white'}
{'function_definition': 'public static partial Color Aqua;', 'function_to_bind': 'color_aqua'}
{'function_definition': 'public static partial Color Aquamarine;', 'function_to_bind': 'color_aquamarine'}
{'function_definition': 'public static partial Color Azure;', 'function_to_bind': 'color_azure'}
{'function_definition': 'public static partial Color Beige;', 'function_to_bind': 'color_beige'}
{'function_definition': 'public static partial Color Bisque;', 'function_to_bind': 'color_bisque'}
{'function_definition': 'public static partial Color Black;', 'function_to_bind': 'color_black'}
{'function_definition': 'public static partial Color BlanchedAlmond;', 'function_to_bind': 'color_blanched_almond'}
{'function_definition': 'public static partial Color Blue;', 'function_to_bind': 'color_blue'}
{'function_definition': 'public static partial Color BlueViolet;', 'function_to_bind': 'color_blue_violet'}
{'function_definition': 'public static partial Color BrightGreen;', 'function_to_bind': 'color_bright_green'}
{'function_definition': 'public static partial Color Brown;', 'function_to_bind': 'color_brown'}
{'function_definition': 'public static partial Color BurlyWood;', 'function_to_bind': 'color_burly_wood'}
{'function_definition': 'public static partial Color CadetBlue;', 'function_to_bind': 'color_cadet_blue'}
{'function_definition': 'public static partial Color Chartreuse;', 'function_to_bind': 'color_chartreuse'}
{'function_definition': 'public static partial Color Chocolate;', 'function_to_bind': 'color_chocolate'}
{'function_definition': 'public static partial Color Coral;', 'function_to_bind': 'color_coral'}
{'function_definition': 'public static partial Color CornflowerBlue;', 'function_to_bind': 'color_cornflower_blue'}
{'function_definition': 'public static partial Color Cornsilk;', 'function_to_bind': 'color_cornsilk'}
{'function_definition': 'public static partial Color Crimson;', 'function_to_bind': 'color_crimson'}
{'function_definition': 'public static partial Color Cyan;', 'function_to_bind': 'color_cyan'}
{'function_definition': 'public static partial Color DarkBlue;', 'function_to_bind': 'color_dark_blue'}
{'function_definition': 'public static partial Color DarkCyan;', 'function_to_bind': 'color_dark_cyan'}
{'function_definition': 'public static partial Color DarkGoldenrod;', 'function_to_bind': 'color_dark_goldenrod'}
{'function_definition': 'public static partial Color DarkGray;', 'function_to_bind': 'color_dark_gray'}
{'function_definition': 'public static partial Color DarkGreen;', 'function_to_bind': 'color_dark_green'}
{'function_definition': 'public static partial Color DarkKhaki;', 'function_to_bind': 'color_dark_khaki'}
{'function_definition': 'public static partial Color DarkMagenta;', 'function_to_bind': 'color_dark_magenta'}
{'function_definition': 'public static partial Color DarkOliveGreen;', 'function_to_bind': 'color_dark_olive_green'}
{'function_definition': 'public static partial Color DarkOrange;', 'function_to_bind': 'color_dark_orange'}
{'function_definition': 'public static partial Color DarkOrchid;', 'function_to_bind': 'color_dark_orchid'}
{'function_definition': 'public static partial Color DarkRed;', 'function_to_bind': 'color_dark_red'}
{'function_definition': 'public static partial Color DarkSalmon;', 'function_to_bind': 'color_dark_salmon'}
{'function_definition': 'public static partial Color DarkSeaGreen;', 'function_to_bind': 'color_dark_sea_green'}
{'function_definition': 'public static partial Color DarkSlateBlue;', 'function_to_bind': 'color_dark_slate_blue'}
{'function_definition': 'public static partial Color DarkSlateGray;', 'function_to_bind': 'color_dark_slate_gray'}
{'function_definition': 'public static partial Color DarkTurquoise;', 'function_to_bind': 'color_dark_turquoise'}
{'function_definition': 'public static partial Color DarkViolet;', 'function_to_bind': 'color_dark_violet'}
{'function_definition': 'public static partial Color DeepPink;', 'function_to_bind': 'color_deep_pink'}
{'function_definition': 'public static partial Color DeepSkyBlue;', 'function_to_bind': 'color_deep_sky_blue'}
{'function_definition': 'public static partial Color DimGray;', 'function_to_bind': 'color_dim_gray'}
{'function_definition': 'public static partial Color DodgerBlue;', 'function_to_bind': 'color_dodger_blue'}
{'function_definition': 'public static partial Color Firebrick;', 'function_to_bind': 'color_firebrick'}
{'function_definition': 'public static partial Color FloralWhite;', 'function_to_bind': 'color_floral_white'}
{'function_definition': 'public static partial Color ForestGreen;', 'function_to_bind': 'color_forest_green'}
{'function_definition': 'public static partial Color Fuchsia;', 'function_to_bind': 'color_fuchsia'}
{'function_definition': 'public static partial Color Gainsboro;', 'function_to_bind': 'color_gainsboro'}
{'function_definition': 'public static partial Color GhostWhite;', 'function_to_bind': 'color_ghost_white'}
{'function_definition': 'public static partial Color Gold;', 'function_to_bind': 'color_gold'}
{'function_definition': 'public static partial Color Goldenrod;', 'function_to_bind': 'color_goldenrod'}
{'function_definition': 'public static partial Color Gray;', 'function_to_bind': 'color_gray'}
{'function_definition': 'public static partial Color Green;', 'function_to_bind': 'color_green'}
{'function_definition': 'public static partial Color GreenYellow;', 'function_to_bind': 'color_green_yellow'}
{'function_definition': 'public static partial Color Honeydew;', 'function_to_bind': 'color_honeydew'}
{'function_definition': 'public static partial Color HotPink;', 'function_to_bind': 'color_hot_pink'}
{'function_definition': 'public static partial Color IndianRed;', 'function_to_bind': 'color_indian_red'}
{'function_definition': 'public static partial Color Indigo;', 'function_to_bind': 'color_indigo'}
{'function_definition': 'public static partial Color Ivory;', 'function_to_bind': 'color_ivory'}
{'function_definition': 'public static partial Color Khaki;', 'function_to_bind': 'color_khaki'}
{'function_definition': 'public static partial Color Lavender;', 'function_to_bind': 'color_lavender'}
{'function_definition': 'public static partial Color LavenderBlush;', 'function_to_bind': 'color_lavender_blush'}
{'function_definition': 'public static partial Color LawnGreen;', 'function_to_bind': 'color_lawn_green'}
{'function_definition': 'public static partial Color LemonChiffon;', 'function_to_bind': 'color_lemon_chiffon'}
{'function_definition': 'public static partial Color LightBlue;', 'function_to_bind': 'color_light_blue'}
{'function_definition': 'public static partial Color LightCoral;', 'function_to_bind': 'color_light_coral'}
{'function_definition': 'public static partial Color LightCyan;', 'function_to_bind': 'color_light_cyan'}
{'function_definition': 'public static partial Color LightGoldenrodYellow;', 'function_to_bind': 'color_light_goldenrod_yellow'}
{'function_definition': 'public static partial Color LightGray;', 'function_to_bind': 'color_light_gray'}
{'function_definition': 'public static partial Color LightGreen;', 'function_to_bind': 'color_light_green'}
{'function_definition': 'public static partial Color LightPink;', 'function_to_bind': 'color_light_pink'}
{'function_definition': 'public static partial Color LightSalmon;', 'function_to_bind': 'color_light_salmon'}
{'function_definition': 'public static partial Color LightSeaGreen;', 'function_to_bind': 'color_light_sea_green'}
{'function_definition': 'public static partial Color LightSkyBlue;', 'function_to_bind': 'color_light_sky_blue'}
{'function_definition': 'public static partial Color LightSlateGray;', 'function_to_bind': 'color_light_slate_gray'}
{'function_definition': 'public static partial Color LightSteelBlue;', 'function_to_bind': 'color_light_steel_blue'}
{'function_definition': 'public static partial Color LightYellow;', 'function_to_bind': 'color_light_yellow'}
{'function_definition': 'public static partial Color Lime;', 'function_to_bind': 'color_lime'}
{'function_definition': 'public static partial Color LimeGreen;', 'function_to_bind': 'color_lime_green'}
{'function_definition': 'public static partial Color Linen;', 'function_to_bind': 'color_linen'}
{'function_definition': 'public static partial Color Magenta;', 'function_to_bind': 'color_magenta'}
{'function_definition': 'public static partial Color Maroon;', 'function_to_bind': 'color_maroon'}
{'function_definition': 'public static partial Color MediumAquamarine;', 'function_to_bind': 'color_medium_aquamarine'}
{'function_definition': 'public static partial Color MediumBlue;', 'function_to_bind': 'color_medium_blue'}
{'function_definition': 'public static partial Color MediumOrchid;', 'function_to_bind': 'color_medium_orchid'}
{'function_definition': 'public static partial Color MediumPurple;', 'function_to_bind': 'color_medium_purple'}
{'function_definition': 'public static partial Color MediumSeaGreen;', 'function_to_bind': 'color_medium_sea_green'}
{'function_definition': 'public static partial Color MediumSlateBlue;', 'function_to_bind': 'color_medium_slate_blue'}
{'function_definition': 'public static partial Color MediumSpringGreen;', 'function_to_bind': 'color_medium_spring_green'}
{'function_definition': 'public static partial Color MediumTurquoise;', 'function_to_bind': 'color_medium_turquoise'}
{'function_definition': 'public static partial Color MediumVioletRed;', 'function_to_bind': 'color_medium_violet_red'}
{'function_definition': 'public static partial Color MidnightBlue;', 'function_to_bind': 'color_midnight_blue'}
{'function_definition': 'public static partial Color MintCream;', 'function_to_bind': 'color_mint_cream'}
{'function_definition': 'public static partial Color MistyRose;', 'function_to_bind': 'color_misty_rose'}
{'function_definition': 'public static partial Color Moccasin;', 'function_to_bind': 'color_moccasin'}
{'function_definition': 'public static partial Color NavajoWhite;', 'function_to_bind': 'color_navajo_white'}
{'function_definition': 'public static partial Color Navy;', 'function_to_bind': 'color_navy'}
{'function_definition': 'public static partial Color OldLace;', 'function_to_bind': 'color_old_lace'}
{'function_definition': 'public static partial Color Olive;', 'function_to_bind': 'color_olive'}
{'function_definition': 'public static partial Color OliveDrab;', 'function_to_bind': 'color_olive_drab'}
{'function_definition': 'public static partial Color Orange;', 'function_to_bind': 'color_orange'}
{'function_definition': 'public static partial Color OrangeRed;', 'function_to_bind': 'color_orange_red'}
{'function_definition': 'public static partial Color Orchid;', 'function_to_bind': 'color_orchid'}
{'function_definition': 'public static partial Color PaleGoldenrod;', 'function_to_bind': 'color_pale_goldenrod'}
{'function_definition': 'public static partial Color PaleGreen;', 'function_to_bind': 'color_pale_green'}
{'function_definition': 'public static partial Color PaleTurquoise;', 'function_to_bind': 'color_pale_turquoise'}
{'function_definition': 'public static partial Color PaleVioletRed;', 'function_to_bind': 'color_pale_violet_red'}
{'function_definition': 'public static partial Color PapayaWhip;', 'function_to_bind': 'color_papaya_whip'}
{'function_definition': 'public static partial Color PeachPuff;', 'function_to_bind': 'color_peach_puff'}
{'function_definition': 'public static partial Color Peru;', 'function_to_bind': 'color_peru'}
{'function_definition': 'public static partial Color Pink;', 'function_to_bind': 'color_pink'}
{'function_definition': 'public static partial Color Plum;', 'function_to_bind': 'color_plum'}
{'function_definition': 'public static partial Color PowderBlue;', 'function_to_bind': 'color_powder_blue'}
{'function_definition': 'public static partial Color Purple;', 'function_to_bind': 'color_purple'}
{'function_definition': 'public static partial Color Red;', 'function_to_bind': 'color_red'}
{'function_definition': 'public static partial Color RosyBrown;', 'function_to_bind': 'color_rosy_brown'}
{'function_definition': 'public static partial Color RoyalBlue;', 'function_to_bind': 'color_royal_blue'}
{'function_definition': 'public static partial Color SaddleBrown;', 'function_to_bind': 'color_saddle_brown'}
{'function_definition': 'public static partial Color Salmon;', 'function_to_bind': 'color_salmon'}
{'function_definition': 'public static partial Color SandyBrown;', 'function_to_bind': 'color_sandy_brown'}
{'function_definition': 'public static partial Color SeaGreen;', 'function_to_bind': 'color_sea_green'}
{'function_definition': 'public static partial Color SeaShell;', 'function_to_bind': 'color_sea_shell'}
{'function_definition': 'public static partial Color Sienna;', 'function_to_bind': 'color_sienna'}
{'function_definition': 'public static partial Color Silver;', 'function_to_bind': 'color_silver'}
{'function_definition': 'public static partial Color SkyBlue;', 'function_to_bind': 'color_sky_blue'}
{'function_definition': 'public static partial Color SlateBlue;', 'function_to_bind': 'color_slate_blue'}
{'function_definition': 'public static partial Color SlateGray;', 'function_to_bind': 'color_slate_gray'}
{'function_definition': 'public static partial Color Snow;', 'function_to_bind': 'color_snow'}
{'function_definition': 'public static partial Color SpringGreen;', 'function_to_bind': 'color_spring_green'}
{'function_definition': 'public static partial Color SteelBlue;', 'function_to_bind': 'color_steel_blue'}
{'function_definition': 'public static partial Color SwinburneRed;', 'function_to_bind': 'color_swinburne_red'}
{'function_definition': 'public static partial Color Tan;', 'function_to_bind': 'color_tan'}
{'function_definition': 'public static partial Color Teal;', 'function_to_bind': 'color_teal'}
{'function_definition': 'public static partial Color Thistle;', 'function_to_bind': 'color_thistle'}
{'function_definition': 'public static partial Color Tomato;', 'function_to_bind': 'color_tomato'}
{'function_definition': 'public static partial Color Transparent;', 'function_to_bind': 'color_transparent'}
{'function_definition': 'public static partial Color Turquoise;', 'function_to_bind': 'color_turquoise'}
{'function_definition': 'public static partial Color Violet;', 'function_to_bind': 'color_violet'}
{'function_definition': 'public static partial Color Wheat;', 'function_to_bind': 'color_wheat'}
{'function_definition': 'public static partial Color White;', 'function_to_bind': 'color_white'}
{'function_definition': 'public static partial Color WhiteSmoke;', 'function_to_bind': 'color_white_smoke'}
{'function_definition': 'public static partial Color Yellow;', 'function_to_bind': 'color_yellow'}
{'function_definition': 'public static partial Color YellowGreen;', 'function_to_bind': 'color_yellow_green'}
{'function_definition': 'public static partial Color HSBColor(double hue, double saturation, double brightness);', 'function_to_bind': 'hsb_color'}
{'function_definition': 'public static partial Color Random();', 'function_to_bind': 'random_color'}
{'function_definition': 'public static partial Color RandomRGB(int alpha);', 'function_to_bind': 'random_rgb_color'}
{'function_definition': 'public static partial Color RGBColor(double red, double green, double blue);', 'function_to_bind': 'rgb_color'}
{'function_definition': 'public static partial Color RGBColor(int red, int green, int blue);', 'function_to_bind': 'rgb_color'}
{'function_definition': 'public static partial Color RGBAColor(double red, double green, double blue, double alpha);', 'function_to_bind': 'rgba_color'}
{'function_definition': 'public static partial Color RGBAColor(int red, int green, int blue, int alpha);', 'function_to_bind': 'rgba_color'}
{'function_definition': 'public partial void Draw(Color clr);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public partial void Draw(Color clr, DrawingOptions opts);', 'function_to_bind': 'draw_circle'}
{'function_definition': 'public partial void Fill(Color clr);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public partial void Fill(Color clr, DrawingOptions opts);', 'function_to_bind': 'fill_circle'}
{'function_definition': 'public partial void DrawCircle(Color clr, double x, double y, double radius);', 'function_to_bind': 'draw_circle_on_bitmap'}
{'function_definition': 'public partial void DrawCircle(Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'draw_circle_on_bitmap'}
{'function_definition': 'public partial void FillCircle(Color clr, double x, double y, double radius);', 'function_to_bind': 'fill_circle_on_bitmap'}
{'function_definition': 'public partial void FillCircle(Color clr, double x, double y, double radius, DrawingOptions opts);', 'function_to_bind': 'fill_circle_on_bitmap'}
{'function_definition': 'public partial void DrawEllipse(Color clr, Rectangle rect);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public partial void DrawEllipse(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public partial void DrawEllipse(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public partial void DrawEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_ellipse_on_bitmap'}
{'function_definition': 'public partial void FillEllipse(Color clr, Rectangle rect);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public partial void FillEllipse(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public partial void FillEllipse(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public partial void FillEllipse(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_ellipse_on_bitmap'}
{'function_definition': 'public partial Circle BoundingCircle(Point2D pt);', 'function_to_bind': 'bitmap_bounding_circle'}
{'function_definition': 'public partial Rectangle BoundingRectangle();', 'function_to_bind': 'bitmap_bounding_rectangle'}
{'function_definition': 'public partial Rectangle BoundingRectangle(double x, double y);', 'function_to_bind': 'bitmap_bounding_rectangle'}
{'function_definition': 'public partial Point2D CellCenter;', 'function_to_bind': 'bitmap_cell_center'}
{'function_definition': 'public partial Circle CellCircle(double x, double y);', 'function_to_bind': 'bitmap_cell_circle'}
{'function_definition': 'public partial Circle CellCircle(Point2D pt);', 'function_to_bind': 'bitmap_cell_circle'}
{'function_definition': 'public partial Circle CellCircle(Point2D pt, double scale);', 'function_to_bind': 'bitmap_cell_circle'}
{'function_definition': 'public partial int CellColumns;', 'function_to_bind': 'bitmap_cell_columns'}
{'function_definition': 'public partial int CellCount;', 'function_to_bind': 'bitmap_cell_count'}
{'function_definition': 'public partial int CellHeight;', 'function_to_bind': 'bitmap_cell_height'}
{'function_definition': 'public partial Vector2D CellOffset(int cell);', 'function_to_bind': 'bitmap_cell_offset'}
{'function_definition': 'public partial Rectangle CellRectangle();', 'function_to_bind': 'bitmap_cell_rectangle'}
{'function_definition': 'public partial Rectangle CellRectangle(Point2D pt);', 'function_to_bind': 'bitmap_cell_rectangle'}
{'function_definition': 'public partial int CellRows;', 'function_to_bind': 'bitmap_cell_rows'}
{'function_definition': 'public partial int CellWidth;', 'function_to_bind': 'bitmap_cell_width'}
{'function_definition': 'public partial Point2D Center;', 'function_to_bind': 'bitmap_center'}
{'function_definition': 'public partial string Filename;', 'function_to_bind': 'bitmap_filename'}
{'function_definition': 'public partial int Height;', 'function_to_bind': 'bitmap_height'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'bitmap_name'}
{'function_definition': 'public partial Rectangle RectangleOfCell(int cell);', 'function_to_bind': 'bitmap_rectangle_of_cell'}
{'function_definition': 'public partial void SetCellDetails(int width, int height, int columns, int rows, int count);', 'function_to_bind': 'bitmap_set_cell_details'}
{'function_definition': 'public partial int Width;', 'function_to_bind': 'bitmap_width'}
{'function_definition': 'public partial void Clear(Color clr);', 'function_to_bind': 'clear_bitmap'}
{'function_definition': 'public partial void Draw(double x, double y);', 'function_to_bind': 'draw_bitmap'}
{'function_definition': 'public partial void Draw(double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap'}
{'function_definition': 'public partial void DrawBitmap(Bitmap destination, double x, double y);', 'function_to_bind': 'draw_bitmap_on_bitmap'}
{'function_definition': 'public partial void DrawBitmap(Bitmap destination, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_bitmap_on_bitmap'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_bitmap'}
{'function_definition': 'public partial bool PixelDrawnAtPoint(Point2D pt);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public partial bool PixelDrawnAtPoint(double x, double y);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public partial bool PixelDrawnAtPointInCell(int cell, Point2D pt);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public partial bool PixelDrawnAtPoint(int cell, double x, double y);', 'function_to_bind': 'pixel_drawn_at_point'}
{'function_definition': 'public partial void SetupCollisionMask();', 'function_to_bind': 'setup_collision_mask'}
{'function_definition': 'public partial void DrawLine(Color clr, Line l);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public partial void DrawLine(Color clr, Line l, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public partial void DrawLine(Color clr, Point2D fromPt, Point2D toPt);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public partial void DrawLine(Color clr, Point2D fromPt, Point2D toPt, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public partial void DrawLine(Color clr, double x1, double y1, double x2, double y2);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public partial void DrawLine(Color clr, double x1, double y1, double x2, double y2, DrawingOptions opts);', 'function_to_bind': 'draw_line_on_bitmap'}
{'function_definition': 'public partial void DrawPixel(Color clr, Point2D pt);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public partial void DrawPixel(Color clr, Point2D pt, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public partial void DrawPixel(Color clr, double x, double y);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public partial void DrawPixel(Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_pixel_on_bitmap'}
{'function_definition': 'public partial void DrawQuad(Color clr, Quad q);', 'function_to_bind': 'draw_quad_on_bitmap'}
{'function_definition': 'public partial void DrawQuad(Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'draw_quad_on_bitmap'}
{'function_definition': 'public partial void DrawRectangle(Color clr, Rectangle rect);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public partial void DrawRectangle(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public partial void DrawRectangle(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public partial void DrawRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'draw_rectangle_on_bitmap'}
{'function_definition': 'public partial void FillQuad(Color clr, Quad q);', 'function_to_bind': 'fill_quad_on_bitmap'}
{'function_definition': 'public partial void FillQuad(Color clr, Quad q, DrawingOptions opts);', 'function_to_bind': 'fill_quad_on_bitmap'}
{'function_definition': 'public partial void FillRectangle(Color clr, Rectangle rect);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public partial void FillRectangle(Color clr, Rectangle rect, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public partial void FillRectangle(Color clr, double x, double y, double width, double height);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public partial void FillRectangle(Color clr, double x, double y, double width, double height, DrawingOptions opts);', 'function_to_bind': 'fill_rectangle_on_bitmap'}
{'function_definition': 'public partial void DrawText(string text, Color clr, string fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public partial void DrawText(string text, Color clr, string fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public partial void DrawText(string text, Color clr, double x, double y);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public partial void DrawText(string text, Color clr, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public partial void DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public partial void DrawText(string text, Color clr, Font fnt, int fontSize, double x, double y, DrawingOptions opts);', 'function_to_bind': 'draw_text_on_bitmap'}
{'function_definition': 'public partial void DrawTriangle(Color clr, Triangle tri);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public partial void DrawTriangle(Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public partial void DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public partial void DrawTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'draw_triangle_on_bitmap'}
{'function_definition': 'public partial void FillTriangle(Color clr, Triangle tri);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public partial void FillTriangle(Color clr, Triangle tri, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public partial void FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public partial void FillTriangle(Color clr, double x1, double y1, double x2, double y2, double x3, double y3, DrawingOptions opts);', 'function_to_bind': 'fill_triangle_on_bitmap'}
{'function_definition': 'public partial bool CircleCollision(Point2D pt, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public partial bool CircleCollision(double x, double y, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public partial bool CircleCollision(int cell, Matrix2D translation, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public partial bool CircleCollision(int cell, Point2D pt, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public partial bool CircleCollision(int cell, double x, double y, Circle circ);', 'function_to_bind': 'bitmap_circle_collision'}
{'function_definition': 'public partial bool BitmapCollision(double x1, double y1, Bitmap bmp2, double x2, double y2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public partial bool BitmapCollision(Point2D pt1, Bitmap bmp2, Point2D pt2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public partial bool BitmapCollision(int cell1, Matrix2D matrix1, Bitmap bmp2, int cell2, Matrix2D matrix2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public partial bool BitmapCollision(int cell1, Point2D pt1, Bitmap bmp2, int cell2, Point2D pt2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public partial bool BitmapCollision(int cell1, double x1, double y1, Bitmap bmp2, int cell2, double x2, double y2);', 'function_to_bind': 'bitmap_collision'}
{'function_definition': 'public partial bool PointCollision(Matrix2D translation, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public partial bool PointCollision(Point2D bmpPt, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public partial bool PointCollision(double bmpX, double bmpY, double x, double y);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public partial bool PointCollision(int cell, Matrix2D translation, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public partial bool PointCollision(int cell, Point2D bmpPt, Point2D pt);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public partial bool PointCollision(int cell, double bmpX, double bmpY, double x, double y);', 'function_to_bind': 'bitmap_point_collision'}
{'function_definition': 'public partial bool QuadCollision(Point2D pt, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public partial bool QuadCollision(double x, double y, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public partial bool QuadCollision(int cell, Matrix2D translation, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public partial bool QuadCollision(int cell, Point2D pt, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public partial bool QuadCollision(int cell, double x, double y, Quad q);', 'function_to_bind': 'bitmap_quad_collision'}
{'function_definition': 'public partial bool RayCollision(Point2D pt, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public partial bool RayCollision(double x, double y, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public partial bool RayCollision(int cell, Matrix2D translation, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public partial bool RayCollision(int cell, Point2D pt, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public partial bool RayCollision(int cell, double x, double y, Point2D origin, Vector2D heading);', 'function_to_bind': 'bitmap_ray_collision'}
{'function_definition': 'public partial bool RectangleCollision(Point2D pt, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public partial bool RectangleCollision(double x, double y, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public partial bool RectangleCollision(int cell, Matrix2D translation, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public partial bool RectangleCollision(int cell, Point2D pt, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public partial bool RectangleCollision(int cell, double x, double y, Rectangle rect);', 'function_to_bind': 'bitmap_rectangle_collision'}
{'function_definition': 'public partial bool TriangleCollision(Point2D pt, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public partial bool TriangleCollision(double x, double y, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public partial bool TriangleCollision(int cell, Matrix2D translation, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public partial bool TriangleCollision(int cell, Point2D pt, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public partial bool TriangleCollision(int cell, double x, double y, Triangle tri);', 'function_to_bind': 'bitmap_triangle_collision'}
{'function_definition': 'public partial int Height;', 'function_to_bind': 'display_height'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'display_name'}
{'function_definition': 'public partial int Width;', 'function_to_bind': 'display_width'}
{'function_definition': 'public partial int X;', 'function_to_bind': 'display_x'}
{'function_definition': 'public partial int Y;', 'function_to_bind': 'display_y'}
{'function_definition': 'public partial Bitmap(string name, int width, int height);', 'function_to_bind': 'create_bitmap'}
{'function_definition': 'public partial Window(string caption, int width, int height);', 'function_to_bind': 'open_window'}
{'function_definition': 'public partial bool HasSize(int fontSize);', 'function_to_bind': 'font_has_size'}
{'function_definition': 'public partial void LoadSize(int fontSize);', 'function_to_bind': 'font_load_size'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_font'}
{'function_definition': 'public partial FontStyle Style;', 'function_to_bind': 'get_font_style'}
{'function_definition': 'public partial void Style { set }', 'function_to_bind': 'set_font_style'}
{'function_definition': 'public static partial void FreeAll();', 'function_to_bind': 'free_all_fonts'}
{'function_definition': 'public static partial int Height(string text, string fnt, int fontSize);', 'function_to_bind': 'text_height'}
{'function_definition': 'public static partial int Height(string text, Font fnt, int fontSize);', 'function_to_bind': 'text_height'}
{'function_definition': 'public static partial int Width(string text, string fnt, int fontSize);', 'function_to_bind': 'text_width'}
{'function_definition': 'public static partial int Width(string text, Font fnt, int fontSize);', 'function_to_bind': 'text_width'}
{'function_definition': 'public partial Json();', 'function_to_bind': 'create_json'}
{'function_definition': 'public partial Json(string jsonString);', 'function_to_bind': 'create_json'}
{'function_definition': 'public static partial void FreeAll();', 'function_to_bind': 'free_all_json'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_json'}
{'function_definition': 'public partial int CountKeys();', 'function_to_bind': 'json_count_keys'}
{'function_definition': 'public static partial Json FromFile(string filename);', 'function_to_bind': 'json_from_file'}
{'function_definition': 'public static partial Json FromJsonString(string jString);', 'function_to_bind': 'json_from_string'}
{'function_definition': 'public partial bool HasKey(string key);', 'function_to_bind': 'json_has_key'}
{'function_definition': 'public partial void ReadArray(string key, ref List<double> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public partial void ReadArray(string key, ref List<Json> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public partial void ReadArray(string key, ref List<string> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public partial void ReadArray(string key, ref List<bool> outResult);', 'function_to_bind': 'json_read_array'}
{'function_definition': 'public partial bool ReadBool(string key);', 'function_to_bind': 'json_read_bool'}
{'function_definition': 'public partial float ReadNumber(string key);', 'function_to_bind': 'json_read_number'}
{'function_definition': 'public partial double ReadDouble(string key);', 'function_to_bind': 'json_read_number_as_double'}
{'function_definition': 'public partial int ReadInteger(string key);', 'function_to_bind': 'json_read_number_as_int'}
{'function_definition': 'public partial Json ReadObject(string key);', 'function_to_bind': 'json_read_object'}
{'function_definition': 'public partial string ReadString(string key);', 'function_to_bind': 'json_read_string'}
{'function_definition': 'public partial void AddArray(string key, List<string> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public partial void AddArray(string key, List<double> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public partial void AddArray(string key, List<bool> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public partial void AddArray(string key, List<Json> value);', 'function_to_bind': 'json_set_array'}
{'function_definition': 'public partial void AddBool(string key, bool value);', 'function_to_bind': 'json_set_bool'}
{'function_definition': 'public partial void AddNumber(string key, int value);', 'function_to_bind': 'json_set_number'}
{'function_definition': 'public partial void AddNumber(string key, double value);', 'function_to_bind': 'json_set_number'}
{'function_definition': 'public partial void AddNumber(string key, float value);', 'function_to_bind': 'json_set_number'}
{'function_definition': 'public partial void AddObject(string key, Json obj);', 'function_to_bind': 'json_set_object'}
{'function_definition': 'public partial void AddString(string key, string value);', 'function_to_bind': 'json_set_string'}
{'function_definition': 'public static partial void ToFile(Json j, string filename);', 'function_to_bind': 'json_to_file'}
{'function_definition': 'public static partial string ToJsonString(Json j);', 'function_to_bind': 'json_to_string'}
{'function_definition': 'public partial bool AcceptNewConnection();', 'function_to_bind': 'accept_new_connection'}
{'function_definition': 'public partial void BroadcastMessage(string aMsg);', 'function_to_bind': 'broadcast_message'}
{'function_definition': 'public partial void ClearMessages();', 'function_to_bind': 'clear_messages'}
{'function_definition': 'public partial bool Close();', 'function_to_bind': 'close_server'}
{'function_definition': 'public partial uint ConnectionCount;', 'function_to_bind': 'connection_count'}
{'function_definition': 'public partial Connection FetchNewConnection();', 'function_to_bind': 'fetch_new_connection'}
{'function_definition': 'public partial bool HasMessages;', 'function_to_bind': 'has_messages'}
{'function_definition': 'public partial Connection LastConnection;', 'function_to_bind': 'last_connection'}
{'function_definition': 'public partial uint MessageCount;', 'function_to_bind': 'message_count'}
{'function_definition': 'public partial int NewConnectionCount;', 'function_to_bind': 'new_connection_count'}
{'function_definition': 'public partial Message ReadMessage();', 'function_to_bind': 'read_message'}
{'function_definition': 'public partial string ReadMessageData();', 'function_to_bind': 'read_message_data'}
{'function_definition': 'public partial void ResetNewConnectionCount();', 'function_to_bind': 'reset_new_connection_count'}
{'function_definition': 'public partial Connection RetrieveConnection(int idx);', 'function_to_bind': 'retrieve_connection'}
{'function_definition': 'public partial bool HasNewConnections;', 'function_to_bind': 'server_has_new_connection'}
{'function_definition': 'public partial void ClearMessages();', 'function_to_bind': 'clear_messages'}
{'function_definition': 'public partial bool Close();', 'function_to_bind': 'close_connection'}
{'function_definition': 'public partial uint IP;', 'function_to_bind': 'connection_ip'}
{'function_definition': 'public partial ushort Port;', 'function_to_bind': 'connection_port'}
{'function_definition': 'public partial bool HasMessages;', 'function_to_bind': 'has_messages'}
{'function_definition': 'public partial bool IsOpen;', 'function_to_bind': 'is_connection_open'}
{'function_definition': 'public partial uint MessageCount;', 'function_to_bind': 'message_count'}
{'function_definition': 'public partial Message ReadMessage();', 'function_to_bind': 'read_message'}
{'function_definition': 'public partial string ReadMessageData();', 'function_to_bind': 'read_message_data'}
{'function_definition': 'public partial void Reconnect();', 'function_to_bind': 'reconnect'}
{'function_definition': 'public partial bool SendMessage(string aMsg);', 'function_to_bind': 'send_message_to'}
{'function_definition': 'public partial void Close();', 'function_to_bind': 'close_message'}
{'function_definition': 'public partial string Data;', 'function_to_bind': 'message_data'}
{'function_definition': 'public partial List<byte> DataBytes;', 'function_to_bind': 'message_data_bytes'}
{'function_definition': 'public partial string Host;', 'function_to_bind': 'message_host'}
{'function_definition': 'public partial ushort Port;', 'function_to_bind': 'message_port'}
{'function_definition': 'public partial ConnectionType Protocol;', 'function_to_bind': 'message_protocol'}
{'function_definition': 'public partial ServerSocket(string name, ushort port);', 'function_to_bind': 'create_server'}
{'function_definition': 'public partial Connection(string name, string host, ushort port);', 'function_to_bind': 'open_connection'}
{'function_definition': 'public partial WebServer(ushort port);', 'function_to_bind': 'start_web_server'}
{'function_definition': 'public partial ServerSocket(string name, ushort port, ConnectionType protocol);', 'function_to_bind': 'create_server'}
{'function_definition': 'public partial Connection(string name, string host, ushort port, ConnectionType protocol);', 'function_to_bind': 'open_connection'}
{'function_definition': 'public static partial bool HasMessages;', 'function_to_bind': 'has_messages'}
{'function_definition': 'public static partial void UDPPacketSize { set }', 'function_to_bind': 'set_udp_packet_size'}
{'function_definition': 'public static partial uint UDPPacketSize;', 'function_to_bind': 'udp_packet_size'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_response'}
{'function_definition': 'public partial bool HasIncomingRequests;', 'function_to_bind': 'has_incoming_requests'}
{'function_definition': 'public partial HttpRequest NextWebRequest;', 'function_to_bind': 'next_web_request'}
{'function_definition': 'public partial void Stop();', 'function_to_bind': 'stop_web_server'}
{'function_definition': 'public partial bool IsDeleteRequestFor(string path);', 'function_to_bind': 'is_delete_request_for'}
{'function_definition': 'public partial bool IsGetRequestFor(string path);', 'function_to_bind': 'is_get_request_for'}
{'function_definition': 'public partial bool IsOptionsRequestFor(string path);', 'function_to_bind': 'is_options_request_for'}
{'function_definition': 'public partial bool IsPostRequestFor(string path);', 'function_to_bind': 'is_post_request_for'}
{'function_definition': 'public partial bool IsPutRequestFor(string path);', 'function_to_bind': 'is_put_request_for'}
{'function_definition': 'public partial bool IsRequestFor(HttpMethod method, string path);', 'function_to_bind': 'is_request_for'}
{'function_definition': 'public partial bool IsTraceRequestFor(string path);', 'function_to_bind': 'is_trace_request_for'}
{'function_definition': 'public partial string Body;', 'function_to_bind': 'request_body'}
{'function_definition': 'public partial bool HasQueryParameter(string name);', 'function_to_bind': 'request_has_query_parameter'}
{'function_definition': 'public partial List<string> Headers;', 'function_to_bind': 'request_headers'}
{'function_definition': 'public partial HttpMethod Method;', 'function_to_bind': 'request_method'}
{'function_definition': 'public partial string QueryParameter(string name, string defaultValue);', 'function_to_bind': 'request_query_parameter'}
{'function_definition': 'public partial string QueryString;', 'function_to_bind': 'request_query_string'}
{'function_definition': 'public partial string URI;', 'function_to_bind': 'request_uri'}
{'function_definition': 'public partial List<string> URIStubs;', 'function_to_bind': 'request_uri_stubs'}
{'function_definition': 'public partial void SendCSSFileResponse(string filename);', 'function_to_bind': 'send_css_file_response'}
{'function_definition': 'public partial void SendFileResponse(string filename, string contentType);', 'function_to_bind': 'send_file_response'}
{'function_definition': 'public partial void SendHtmlFileResponse(string filename);', 'function_to_bind': 'send_html_file_response'}
{'function_definition': 'public partial void SendJavascriptFileResponse(string filename);', 'function_to_bind': 'send_javascript_file_response'}
{'function_definition': 'public partial void SendResponse();', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial void SendResponse(string message);', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial void SendResponse(HttpStatusCode code);', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial void SendResponse(HttpStatusCode code, string message);', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial void SendResponse(HttpStatusCode code, string message, string contentType);', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial void SendResponse(HttpStatusCode code, string message, string contentType, List<string> headers);', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial void SendResponse(Json j);', 'function_to_bind': 'send_response'}
{'function_definition': 'public partial WebServer();', 'function_to_bind': 'start_web_server'}
{'function_definition': 'public partial bool BitmapCollision(Bitmap bmp, double x, double y);', 'function_to_bind': 'sprite_bitmap_collision'}
{'function_definition': 'public partial bool BitmapCollision(Bitmap bmp, int cell, Point2D pt);', 'function_to_bind': 'sprite_bitmap_collision'}
{'function_definition': 'public partial bool BitmapCollision(Bitmap bmp, int cell, double x, double y);', 'function_to_bind': 'sprite_bitmap_collision'}
{'function_definition': 'public partial bool CircleCollision(Circle c);', 'function_to_bind': 'sprite_circle_collision'}
{'function_definition': 'public partial bool SpriteCollision(Sprite s2);', 'function_to_bind': 'sprite_collision'}
{'function_definition': 'public partial bool PointCollision(Point2D pt);', 'function_to_bind': 'sprite_point_collision'}
{'function_definition': 'public partial bool QuadCollision(Quad q);', 'function_to_bind': 'sprite_quad_collision'}
{'function_definition': 'public partial bool RayCollision(Point2D origin, Vector2D heading);', 'function_to_bind': 'sprite_ray_collision'}
{'function_definition': 'public partial bool RectangleCollision(Rectangle rect);', 'function_to_bind': 'sprite_rectangle_collision'}
{'function_definition': 'public partial bool TriangleCollision(Triangle t);', 'function_to_bind': 'sprite_triangle_collision'}
{'function_definition': 'public partial void Draw(Vector2D offset);', 'function_to_bind': 'draw_sprite'}
{'function_definition': 'public partial void Draw();', 'function_to_bind': 'draw_sprite'}
{'function_definition': 'public partial void Draw(double xOffset, double yOffset);', 'function_to_bind': 'draw_sprite'}
{'function_definition': 'public partial void Move();', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public partial void Move(Vector2D distance);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public partial void Move(Vector2D distance, float pct);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public partial void Move(float pct);', 'function_to_bind': 'move_sprite'}
{'function_definition': 'public partial void MoveTo(double x, double y);', 'function_to_bind': 'move_sprite_to'}
{'function_definition': 'public partial int AddLayer(Bitmap newLayer, string layerName);', 'function_to_bind': 'sprite_add_layer'}
{'function_definition': 'public partial void AddToVelocity(Vector2D value);', 'function_to_bind': 'sprite_add_to_velocity'}
{'function_definition': 'public partial void AddValue(string name);', 'function_to_bind': 'sprite_add_value'}
{'function_definition': 'public partial void AddValue(string name, float initVal);', 'function_to_bind': 'sprite_add_value'}
{'function_definition': 'public partial Point2D AnchorPoint;', 'function_to_bind': 'sprite_anchor_point'}
{'function_definition': 'public partial bool AnimationHasEnded;', 'function_to_bind': 'sprite_animation_has_ended'}
{'function_definition': 'public partial string AnimationName();', 'function_to_bind': 'sprite_animation_name'}
{'function_definition': 'public partial void SendLayerForward(int visibleLayer);', 'function_to_bind': 'sprite_bring_layer_forward'}
{'function_definition': 'public partial void SendLayerTofront(int visibleLayer);', 'function_to_bind': 'sprite_bring_layer_to_front'}
{'function_definition': 'public partial void CallOnEvent(SpriteEventHandler handler);', 'function_to_bind': 'sprite_call_on_event'}
{'function_definition': 'public partial Point2D SpriteCenterPoint;', 'function_to_bind': 'sprite_center_point'}
{'function_definition': 'public partial Circle Circle();', 'function_to_bind': 'sprite_circle'}
{'function_definition': 'public partial Bitmap CollisionBitmap;', 'function_to_bind': 'sprite_collision_bitmap'}
{'function_definition': 'public partial Circle CollisionCircle();', 'function_to_bind': 'sprite_collision_circle'}
{'function_definition': 'public partial CollisionTestKind CollisionKind;', 'function_to_bind': 'sprite_collision_kind'}
{'function_definition': 'public partial Rectangle CollisionRectangle;', 'function_to_bind': 'sprite_collision_rectangle'}
{'function_definition': 'public partial int CurrentCell;', 'function_to_bind': 'sprite_current_cell'}
{'function_definition': 'public partial Rectangle CurrentCellRectangle;', 'function_to_bind': 'sprite_current_cell_rectangle'}
{'function_definition': 'public partial double Dx;', 'function_to_bind': 'sprite_dx'}
{'function_definition': 'public partial double Dy;', 'function_to_bind': 'sprite_dy'}
{'function_definition': 'public partial float Heading;', 'function_to_bind': 'sprite_heading'}
{'function_definition': 'public partial int Height;', 'function_to_bind': 'sprite_height'}
{'function_definition': 'public partial void HideLayer(string name);', 'function_to_bind': 'sprite_hide_layer'}
{'function_definition': 'public partial void HideLayer(int id);', 'function_to_bind': 'sprite_hide_layer'}
{'function_definition': 'public partial Bitmap Layer(string name);', 'function_to_bind': 'sprite_layer'}
{'function_definition': 'public partial Bitmap Layer(int idx);', 'function_to_bind': 'sprite_layer'}
{'function_definition': 'public partial Circle LayerCircle(string name);', 'function_to_bind': 'sprite_layer_circle'}
{'function_definition': 'public partial Circle LayerCircle(int idx);', 'function_to_bind': 'sprite_layer_circle'}
{'function_definition': 'public partial int LayerCount;', 'function_to_bind': 'sprite_layer_count'}
{'function_definition': 'public partial int LayerHeight(string name);', 'function_to_bind': 'sprite_layer_height'}
{'function_definition': 'public partial int LayerHeight(int idx);', 'function_to_bind': 'sprite_layer_height'}
{'function_definition': 'public partial int IndexOfLayer(string name);', 'function_to_bind': 'sprite_layer_index'}
{'function_definition': 'public partial string LayerName(int idx);', 'function_to_bind': 'sprite_layer_name'}
{'function_definition': 'public partial Vector2D LayerOffset(string name);', 'function_to_bind': 'sprite_layer_offset'}
{'function_definition': 'public partial Vector2D LayerOffset(int idx);', 'function_to_bind': 'sprite_layer_offset'}
{'function_definition': 'public partial Rectangle LayerRectangle(string name);', 'function_to_bind': 'sprite_layer_rectangle'}
{'function_definition': 'public partial Rectangle LayerRectangle(int idx);', 'function_to_bind': 'sprite_layer_rectangle'}
{'function_definition': 'public partial int LayerWidth(string name);', 'function_to_bind': 'sprite_layer_width'}
{'function_definition': 'public partial int LayerWidth(int idx);', 'function_to_bind': 'sprite_layer_width'}
{'function_definition': 'public partial Matrix2D LocationMatrix;', 'function_to_bind': 'sprite_location_matrix'}
{'function_definition': 'public partial float Mass;', 'function_to_bind': 'sprite_mass'}
{'function_definition': 'public partial bool MoveFromAnchorPoint;', 'function_to_bind': 'sprite_move_from_anchor_point'}
{'function_definition': 'public partial void MoveTo(Point2D pt, float takingSeconds);', 'function_to_bind': 'sprite_move_to'}
{'function_definition': 'public partial string Name;', 'function_to_bind': 'sprite_name'}
{'function_definition': 'public partial bool Offscreen();', 'function_to_bind': 'sprite_offscreen'}
{'function_definition': 'public partial bool OnScreenAt(Point2D pt);', 'function_to_bind': 'sprite_on_screen_at'}
{'function_definition': 'public partial bool OnScreenAt(double x, double y);', 'function_to_bind': 'sprite_on_screen_at'}
{'function_definition': 'public partial Point2D Position;', 'function_to_bind': 'sprite_position'}
{'function_definition': 'public partial void ReplayAnimation();', 'function_to_bind': 'sprite_replay_animation'}
{'function_definition': 'public partial void ReplayAnimation(bool withSound);', 'function_to_bind': 'sprite_replay_animation'}
{'function_definition': 'public partial float Rotation;', 'function_to_bind': 'sprite_rotation'}
{'function_definition': 'public partial float Scale;', 'function_to_bind': 'sprite_scale'}
{'function_definition': 'public partial Rectangle ScreenRectangle;', 'function_to_bind': 'sprite_screen_rectangle'}
{'function_definition': 'public partial void SendLayerTobackward(int visibleLayer);', 'function_to_bind': 'sprite_send_layer_backward'}
{'function_definition': 'public partial void SendLayerToBack(int visibleLayer);', 'function_to_bind': 'sprite_send_layer_to_back'}
{'function_definition': 'public partial void AnchorPoint { set }', 'function_to_bind': 'sprite_set_anchor_point'}
{'function_definition': 'public partial void CollisionBitmap { set }', 'function_to_bind': 'sprite_set_collision_bitmap'}
{'function_definition': 'public partial void CollisionKind { set }', 'function_to_bind': 'sprite_set_collision_kind'}
{'function_definition': 'public partial void Dx { set }', 'function_to_bind': 'sprite_set_dx'}
{'function_definition': 'public partial void Dy { set }', 'function_to_bind': 'sprite_set_dy'}
{'function_definition': 'public partial void Heading { set }', 'function_to_bind': 'sprite_set_heading'}
{'function_definition': 'public partial void SetLayerOffset(string name, Vector2D value);', 'function_to_bind': 'sprite_set_layer_offset'}
{'function_definition': 'public partial void SetLayerOffset(int idx, Vector2D value);', 'function_to_bind': 'sprite_set_layer_offset'}
{'function_definition': 'public partial void Mass { set }', 'function_to_bind': 'sprite_set_mass'}
{'function_definition': 'public partial void MoveFromAnchorPoint { set }', 'function_to_bind': 'sprite_set_move_from_anchor_point'}
{'function_definition': 'public partial void Position { set }', 'function_to_bind': 'sprite_set_position'}
{'function_definition': 'public partial void Rotation { set }', 'function_to_bind': 'sprite_set_rotation'}
{'function_definition': 'public partial void Scale { set }', 'function_to_bind': 'sprite_set_scale'}
{'function_definition': 'public partial void Speed { set }', 'function_to_bind': 'sprite_set_speed'}
{'function_definition': 'public partial void SetValue(string name, float val);', 'function_to_bind': 'sprite_set_value'}
{'function_definition': 'public partial void Velocity { set }', 'function_to_bind': 'sprite_set_velocity'}
{'function_definition': 'public partial void X { set }', 'function_to_bind': 'sprite_set_x'}
{'function_definition': 'public partial void Y { set }', 'function_to_bind': 'sprite_set_y'}
{'function_definition': 'public partial int ShowLayer(string name);', 'function_to_bind': 'sprite_show_layer'}
{'function_definition': 'public partial int ShowLayer(int id);', 'function_to_bind': 'sprite_show_layer'}
{'function_definition': 'public partial double Speed;', 'function_to_bind': 'sprite_speed'}
{'function_definition': 'public partial void StartAnimation(string named);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public partial void StartAnimation(string named, bool withSound);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public partial void StartAnimation(int idx);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public partial void StartAnimation(int idx, bool withSound);', 'function_to_bind': 'sprite_start_animation'}
{'function_definition': 'public partial void StopCallingOnEvent(SpriteEventHandler handler);', 'function_to_bind': 'sprite_stop_calling_on_event'}
{'function_definition': 'public partial void ToggleLayerVisible(string name);', 'function_to_bind': 'sprite_toggle_layer_visible'}
{'function_definition': 'public partial void ToggleLayerVisible(int id);', 'function_to_bind': 'sprite_toggle_layer_visible'}
{'function_definition': 'public partial float Value(string name);', 'function_to_bind': 'sprite_value'}
{'function_definition': 'public partial int ValueCount;', 'function_to_bind': 'sprite_value_count'}
{'function_definition': 'public partial Vector2D Velocity;', 'function_to_bind': 'sprite_velocity'}
{'function_definition': 'public partial int VisibleIndexOfLayer(string name);', 'function_to_bind': 'sprite_visible_index_of_layer'}
{'function_definition': 'public partial int VisibleIndexOfLayer(int id);', 'function_to_bind': 'sprite_visible_index_of_layer'}
{'function_definition': 'public partial int VisibleLayer(int idx);', 'function_to_bind': 'sprite_visible_layer'}
{'function_definition': 'public partial int VisibleLayerCount;', 'function_to_bind': 'sprite_visible_layer_count'}
{'function_definition': 'public partial int VisibleLayerIdAt(int idx);', 'function_to_bind': 'sprite_visible_layer_id'}
{'function_definition': 'public partial int Width;', 'function_to_bind': 'sprite_width'}
{'function_definition': 'public partial double X;', 'function_to_bind': 'sprite_x'}
{'function_definition': 'public partial double Y;', 'function_to_bind': 'sprite_y'}
{'function_definition': 'public partial void Update();', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public partial void Update(bool withSound);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public partial void Update(float pct);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public partial void Update(float pct, bool withSound);', 'function_to_bind': 'update_sprite'}
{'function_definition': 'public partial void UpdateAnimation();', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public partial void UpdateAnimation(bool withSound);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public partial void UpdateAnimation(float pct);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public partial void UpdateAnimation(float pct, bool withSound);', 'function_to_bind': 'update_sprite_animation'}
{'function_definition': 'public partial Vector2D VectorTo(Point2D pt);', 'function_to_bind': 'vector_from_center_sprite_to_point'}
{'function_definition': 'public partial Vector2D VectorTo(Sprite s2);', 'function_to_bind': 'vector_from_to'}
{'function_definition': 'public partial void Close();', 'function_to_bind': 'close_adc'}
{'function_definition': 'public partial int Read(AdcPin channel);', 'function_to_bind': 'read_adc'}
{'function_definition': 'public partial AdcDevice(string name, AdcType type);', 'function_to_bind': 'open_adc'}
{'function_definition': 'public partial AdcDevice(string name, int bus, int address, AdcType type);', 'function_to_bind': 'open_adc'}
{'function_definition': 'public partial Sprite(Bitmap layer);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public partial Sprite(string name, Bitmap layer);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public partial Sprite(Bitmap layer, AnimationScript ani);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public partial Sprite(string name, Bitmap layer, AnimationScript ani);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public partial Sprite(string bitmapName);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public partial Sprite(string bitmapName, string animationName);', 'function_to_bind': 'create_sprite'}
{'function_definition': 'public partial Timer(string name);', 'function_to_bind': 'create_timer'}
{'function_definition': 'public partial void Free();', 'function_to_bind': 'free_timer'}
{'function_definition': 'public partial void Pause();', 'function_to_bind': 'pause_timer'}
{'function_definition': 'public partial void Reset();', 'function_to_bind': 'reset_timer'}
{'function_definition': 'public partial void Resume();', 'function_to_bind': 'resume_timer'}
{'function_definition': 'public partial void Start();', 'function_to_bind': 'start_timer'}
{'function_definition': 'public partial void Stop();', 'function_to_bind': 'stop_timer'}
{'function_definition': 'public partial bool IsPaused;', 'function_to_bind': 'timer_paused'}
{'function_definition': 'public partial bool IsStarted;', 'function_to_bind': 'timer_started'}
{'function_definition': 'public partial uint Ticks;', 'function_to_bind': 'timer_ticks'}
